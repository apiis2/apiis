#LyX 1.3 created this file. For more info see http://www.lyx.org/
\lyxformat 221
\textclass book
\begin_preamble
\tolerance=8000
\usepackage{longtable}
\sloppy
\end_preamble
\language english
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle default

\layout Title


\size giant 
Documentation
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{10mm}
\end_inset 


\newline 
of 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{10mm}
\newline 

\end_inset 

the
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{15mm}
\end_inset 

 
\newline 
 
\begin_inset Graphics
	filename apiis6.ps
	display color
	width 11cm
	height 5cm
	rotateOrigin center

\end_inset 


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{15mm}
\end_inset 


\newline 
Software
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace{25mm}
\end_inset 


\layout Author

Eildert Groeneveld
\newline 
Helmut Lichtenberg
\newline 
Ralf Fischer
\layout Right Address

Eildert Groeneveld
\newline 
Institute of Animal Science
\newline 
Hölty-str.
 10
\newline 
D31535 Neustadt
\newline 
Germany
\newline 
Eildert.Groeneveld@fal.de
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Chapter

Introduction
\layout Standard

This paper represents the documentation of APIIS.
 It tries to explain all steps required to setup and run an information
 system.
 This will be done using one reference database for breeding programs and
 is available as a module (ref_breedprg) in the CVS tree.
 It resides in $APIIS_HOME/ref_breedprg.
 Other modules come soon, for example for manage the datas from molecular
 laboratories or for cryo conservation systems.
 
\layout Standard

The directory initial
\begin_inset LatexCommand \index{initial}

\end_inset 

 contains all data and programs required to load the historic data.
 The batch job runall
\begin_inset LatexCommand \index{runall}

\end_inset 

 should be sufficient to execute the complete procedure for creating the
 database and loading the historic data sets.
 There are two further runall jobs, runall_cleaning_and_LO.pl to demonstrate
 the handling of load objects and the error handling, and runall_output.pl
 to show some outputs from the database.
\layout Chapter

Fixed APIIS Structure
\layout Standard

This chapter describes that part of the database structure which is the
 same in all APIIS database.
\layout Section

TRANSFER
\layout Section

CODES
\layout Section

UNIT, NAMING, ADDRESS
\layout Standard

These three tables cosntitute one block which administers all units, persons
 and addresses in the database.
 As such it should be quite generic and should be used, largely unchanged
 in every database.
\layout Subsection

ADDRESS
\layout Standard

This table holds the individual physical addresses, one entry for each.
 The primary key is the sequence DB_ADDRESS
\layout Subsection

NAMING
\layout Standard

Here we store all individual persons and organization which are part of
 the system.
 Many people can have the same address, that is why in a normalized way
 this has been split into ADDRESS and NAMING.
 The primary key is the DB_NAME which is a sequence.
\layout Subsection

UNIT
\layout Standard

EXT_ID is the external identification used in the outside world.
 This may be the number or code 
\begin_inset Quotes eld
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

 for the veterinarians.
 Then EXT_UNIT would be 
\begin_inset Quotes eld
\end_inset 

VET
\begin_inset Quotes erd
\end_inset 

.
 If we would merge veterinarians from Bavaria and Saxony in one system,
 and the vets were numbered within each state beginning with 
\begin_inset Quotes eld
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

, the EXT_UNIT would be 
\begin_inset Quotes eld
\end_inset 

VET-SAX
\begin_inset Quotes erd
\end_inset 

 and 
\begin_inset Quotes eld
\end_inset 

VET-BAV
\begin_inset Quotes erd
\end_inset 

.
 In this way the old numbering systems can continue to be used (which is
 actually the motivation for the EXT_UNIT/EXT_ID setup.
 Thus, EXT_UNIT has to be defined such that the EXT_IDs being used are made
 unique.
\layout Standard

One other objective is the possibility to reuse external numbers.
 Assume that the head veterinarian with EXT_ID=
\begin_inset Quotes erd
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

 retires and is replaced by his successor.
 This person should again get the EXT_ID=
\begin_inset Quotes erd
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

.
 Then, the same as in TRANSFER, the old EXT_ID gets closed (CLOSING_DT is
 set) and a new record with the EXT_=ID=
\begin_inset Quotes erd
\end_inset 

1
\begin_inset Quotes erd
\end_inset 

 is created.
\layout Standard

The unique index is EXT_UNIT||EXT_ID where CLOSING_DT is NULL.
 This means that we are allowing one 
\begin_inset Quotes eld
\end_inset 

open
\begin_inset Quotes erd
\end_inset 

 channel for the combination of external unit and external identification.
\layout Subsection

Navigation
\layout Standard

Access to ADDRESS and NAMING is straight forward.
 Let us assume a new address is to be entered.
 The following steps are performed:
\layout Enumerate

verify that the address to be entered does not already exist.
 This can be done by search the table ADDRESS on any fields with a LIKE
 expression.
\layout Enumerate

enter a new address.
 The primary key is simply the sequence DB_ADDRESS.
 Note that EXT_ADDRESS is just a plain column which may be used for locating
 a record in an interactive manner.
 Notice that COUNTRY needs to be defined in CODES (Foreign Key).
\layout Standard

It is the sole responsibility of the user to ensure that no duplicate addresses
 are entered.
 While this may sound dangerous it is actually the only logical way.
 If an address is entered twice there is really no harm done as this and
 the other may be used together as DB_ADRESS will be used to link the address
 to people.
\layout Standard

NAMING is delt with in a similar manner.
 The insertion process is identical to ADDRESS:
\layout Enumerate

verify that the person/organization to be entered does not already exist
 by searching on any of the fields interactively.
\layout Enumerate

insert the new person/organization.
 The primary key DB_NAMING will automatically come from a the sequence seq_namin
g__db_nam.
 Notice that LANGUAGE needs to be defined in CODES (Foreign Key).
\layout Standard

UNIT has a somewhat different position in this triplet.
 It defines the telefonnumbers, fax, e-mail belonging to a person or organizatio
n for a given role.
 To create a new external ID, let us say the second veterinarian, we would
 do the following:
\layout Enumerate

type EXT_UNIT='VET' and EXT_ID='2' into unit
\begin_deeper 
\layout Enumerate

locate the address of this person in ADDRESS (remember DB_ADDRESS)
\layout Enumerate

locate the person in NAMING (remember DB_NAMING)
\end_deeper 
\layout Enumerate

insert record in UNIT with all data using DB_ADDRESS and DB_NAMING, DB_UNIT
 is derived from the sequence, OPENING_DT is set to the current date while
 CLOSING_DT is NULL.
\layout Standard

Thus far, no statemens have been made as to the status of DB_UNIT.
 While in ADDRESS and NAMING the corresponding DB_ columns function as primary
 keys, this is not the case here.
 Thus, if the user choses to create another 
\begin_inset Quotes eld
\end_inset 

input channel
\begin_inset Quotes erd
\end_inset 

 for a different EXT_UNIT/EXT_ID with the same DB_UNIT nothing will prevent
 her from doing this.
 What needs to be considered is however that a select on DB_UNIT will then
 return two records instead of one.
\layout Chapter

The business and modify rules
\layout Section

The business rules
\layout Standard

The currently implemented business rules are shown in table 
\begin_inset LatexCommand \ref{tab:business rules}

\end_inset 

 on page 
\begin_inset LatexCommand \pageref{tab:business rules}

\end_inset 

.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

Implemented Business Rules
\begin_inset LatexCommand \label{tab:business rules}

\end_inset 


\begin_inset LatexCommand \index{business rules!Range}

\end_inset 


\begin_inset LatexCommand \index{business rules!List}

\end_inset 


\begin_inset LatexCommand \index{business rules!IsANumber}

\end_inset 


\begin_inset LatexCommand \index{business rules!NoNumber}

\end_inset 


\begin_inset LatexCommand \index{business rules!IsAFloat}

\end_inset 


\begin_inset LatexCommand \index{business rules!Unique}

\end_inset 


\begin_inset LatexCommand \index{business rules!ForeignKey}

\end_inset 


\begin_inset LatexCommand \index{business rules!DateDiff}

\end_inset 


\begin_inset LatexCommand \index{business rules!LastAction}

\end_inset 


\begin_inset LatexCommand \index{business rules!IsEqual}

\end_inset 


\begin_inset LatexCommand \index{business rules!ReservedStrings}

\end_inset 


\layout Standard
\align center 

\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
vspace*{4mm}
\end_inset 


\begin_inset  Tabular
<lyxtabular version="3" rows="13" columns="3">
<features rotate="true">
<column alignment="left" valignment="top" leftline="true" width="0pt">
<column alignment="block" valignment="top" leftline="true" width="100mm">
<column alignment="block" valignment="top" leftline="true" rightline="true" width="50mm">
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
\size small 
Method
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
\size small 
Description
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
\size small 
Example
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
Range
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
value has to be within given range
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

Range 10 33
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
List
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
only values from this list are allowed
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

List LR LW PI DU
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
NotNull
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
has to have a value
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

NotNull
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
IsANumber
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
only a number is accepted (5, -.37, +5.3e-3)
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

IsANumber''
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
NoNumber
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard

value must not contain any number 
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

NoNumber''
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
IsAFloat
\size default 

\begin_inset Note
collapsed true

\layout Standard

Diese Regel macht offensichtlich wenig Sinn da IsANumber
\layout Standard

auch Floats erkennt.
 Gibt es also Anwendungen, wo man
\layout Standard

ausdrücklich Floats braucht? Und was kennzeichnet ein
\layout Standard

Float? Ist z.B.
 5 eine legale Float-Zahl?
\end_inset 


\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
value must be a floating point number (+4.3, .27, -0.5)
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

IsAFloat''
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
Unique
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
the value is a unique key in the current table
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

Unique
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
ForeignKey
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
value has to have an entry in the specified table and column, possibly with
 some additional conditions
\end_inset 
</cell>
<cell alignment="left" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
mbox{
\end_inset 


\begin_inset Quotes eld
\end_inset 

ForeignKey animal db_animal
\begin_inset Quotes erd
\end_inset 

,
\begin_inset ERT
status Collapsed

\layout Standard
}
\end_inset 


\layout Standard


\size small 

\begin_inset Quotes erd
\end_inset 

ForeignKey v_animal db_animal ext_sex=1 ext_breed=DL
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
DateDiff
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
the difference between the content of farrowing date and current columns
 of the current record must be with the given range
\layout Standard


\size small 
DateDiff takes the current value of the record and computes the difference
 to date given in the first parameter (compare_date).
 If the difference (in days) between the cure and compare_date is in the
 range given by min_diff and max_diff the rule is passed successfully.
 
\layout Standard


\size small 
compare_date can either be a fixed format date like Mar-22-2001, a column
 of the current record or a date in a database table/column with the (hardcoded)
 db_animal value of the current record.
 The syntax for this format is 'tablename=>columname'.
 If no compare date comes from the database the check is also successfully.
 
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
mbox{
\end_inset 


\begin_inset Quotes eld
\end_inset 

DateDiff farrow_dt 20 56
\begin_inset Quotes erd
\end_inset 

,
\begin_inset ERT
status Collapsed

\layout Standard
}
\end_inset 


\layout Standard


\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
mbox{
\end_inset 


\begin_inset Quotes eld
\end_inset 

DateDiff Mar-22-2001 50 90'',
\begin_inset ERT
status Collapsed

\layout Standard
}
\end_inset 


\layout Standard


\size small 

\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
mbox{
\end_inset 


\begin_inset Quotes eld
\end_inset 

DateDiff animal=>birth_dt 1 65''
\begin_inset ERT
status Collapsed

\layout Standard
}
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
LastAction
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
LastAction is a conditional DateDiff depending on the value of the last
 action.
 For each element of this last action list an allowed range (in days) has
 to be specified.
\layout Standard


\size small 
If last action was SEL[ECTION] the range is 20 100, if it was AI the range
 is 18 30
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

LastAction SEL 30 100 AI 18 30 LITTER 10 34
\begin_inset Quotes erd
\end_inset 


\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard

IsEqual
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard

This example is placed in the CHECK attached to column db_sire e.g.
 in service and tests if the animal ID given is indeed a male.
 Thus, the second parameter (i.e.
 $data_column) takes its value from the current column Notice that the constant
 is specified as external code.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard

IsEqual ( animal db_animal db_sex 'M'); 
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard

ReservedStrings
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 
ReservedStrings checks if the passed $date contains one of the reserved
 strings which are defined in apiisrc.
\end_inset 
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\layout Standard


\size small 

\begin_inset Quotes eld
\end_inset 

ReservedStrings''
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Section

The Modify Rules
\layout Standard

Sometimes it is necessary to modify the incoming value before it is fed
 to the business rules.
 These modify methods are: 
\backslash 
par
\backslash 
vspace{4mm}
\layout Standard
\align center 

\begin_inset LatexCommand \label{encode}

\end_inset 


\begin_inset  Tabular
<lyxtabular version="3" rows="11" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="block" valignment="top" rightline="true" width="80mm">
<column alignment="left" valignment="top" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Method
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Description
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\series bold 
Example
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

UpperCase
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

converts all passed date into uppercase letters
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

UpperCase''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

LowerCase
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

converts all passed date into lowercase letters
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

LowerCase''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ConvertBool
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

accepts YyJjNn and converts it to the appropriate boolean expression (true/false
)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

ConvertBool''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

CommaToDot
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

translates all commas , into dots .
 (mainly used for numerical date)
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

CommaToDot''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

DotToColon
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

translates all dots .
 into colons : (useful for fast typing of date/time values (16.34.00 => 16:34:00
\end_inset 
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

DotToColon''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Encode
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

the current value is taken as external code within a class of table codes.
 It returns the encoded db_code.
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

Encode BREED''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Encode_unit
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

the unit needs a special treatment for encoding
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

Encode_unit''
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Encode_animal
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

animal encoding is a special case, too
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

Encode_animal''
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SetNow
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sets the value to the current time
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

SetNow''
\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

SetUser
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sets the value to the user who is running this job
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\begin_inset Quotes eld
\end_inset 

SetUser''
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\layout Section

Layering
\begin_inset LatexCommand \index{Layering}

\end_inset 

 of Business Rules
\layout Standard

As described above, all business rules are specified as properties of the
 the columns nd are thus part of their definition.
 This results in one set of rules applied to any database modifications.
 However, there may be circumstances that one set of rules is not sufficient
 to describe all data coming into the database.
 For instance, the database may contain data from the nucleus level of a
 breeding program and also data from the production level.
 Clearly, business rules may be different for the two types of data.
 To accommodate this situation APIIS has implemented sets or layers of business
 rules.
 The philosophy behind this is, that data streams can be subdivided into
 distinct classes of data which have their own set of rules.
 Examples are (as mentioned above) nucleus versus production level.
 Others could be fat breeds versus less fat (like Meishan vs Landrace).
\layout Standard

Operationally, business rules layers are defined as additional CHECK in
 the model file.
 They are written as CHECK1
\begin_inset LatexCommand \index{CHECK1}

\end_inset 

 for a layer 1, CHECK2
\begin_inset LatexCommand \index{CHECK2}

\end_inset 

 for a layer 2 etc.
 An example is given in table 
\begin_inset LatexCommand \ref{cap:check levels}

\end_inset 

.
 The column db_sex requires is a foreign key in CODES and must not be NULL
 in the base (default) level as indicated by the the key CHECK.
 If no check_level (chk_lvl
\begin_inset LatexCommand \index{chk\_lvl}

\end_inset 

) is specified those given by CHECK apply.
 Its explicit chk_lvl is 0.
 On the other hand the chk_lvl=1 has only the foreign key requirement.
 Thus, at this level NULL values for sex will be allowed.
 
\layout Standard

The procedure for specifying and using layered business rules is as follows:
\layout Enumerate

determine the number of layers of business rules required in your set of
 data streams.
 This means that you should group together classes of records that have
 similar requirements regarding the business rules.
 Examples are: nucleus population, multiplier level, production level.
 Or small breeds version large breeds.
 Also, combinations are possible.
 These levels should get entries for documentation purposes in CODES
\begin_inset LatexCommand \index{CODES}

\end_inset 

 under class CK_LVL.
\layout Enumerate

write the basic set of rules in the model file using the key CHECK.
 The set of rules specified here will be the basic level that is used.
 Thus, it will be used if either CHK_LVL is set to 0 or not set at all.
 Then specify for each check level a corresponding CHECKn rule.
 Thus, if you decided to have three check levels you will have CHECK, CHECK1
 and CHECK2 in your model file.
 While CHECK should be specified as the base set of rules, the other CHECKs
 are specified only if the base CHECK is not applicable.
 Thus, whenever a CHECK key exists for a given column corresponding the
 chk_lvl specified it will replace the base CHECK.
 Then this set of business rules will be executed.
 As can be seen in table 
\begin_inset LatexCommand \ref{cap:check levels}

\end_inset 

 only for column db_sex are the business rules modified in level 1.
 In db_breed only the base is specified, thus for all other chk_lvl that
 may be specified only the base set of checks are performed.
\layout Enumerate

as has been said above, prior to enforcing the business rules the programmer
 needs to specify which level she/he wants to fire.
 This is typically done in the load object by calling the routine: $apiis->Model-
>set_checklevel
\begin_inset LatexCommand \index{set\_checklevel}

\end_inset 

 (1); In this example it would be set to 1.
 If you specify a check level that does not exists in the model file at
 least once the calling program should stop.
\layout Enumerate

With a number of possible check levels, the current level that was used
 when the database content was modified (insert or update) needs to be stored
 with the record in each table.
 This is done in the column CHK_LVL.
 This is read and used in the program check_integrity
\begin_inset LatexCommand \index{check\_integrity}

\end_inset 

 to fire the correct set of business rules.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:check levels}

\end_inset 

Specifying layers of business rules
\layout LyX-Code


\size scriptsize 
col002 => { DATA => '', 
\layout LyX-Code


\size scriptsize 
            DB_COLUMN   => 'db_sex', 
\layout LyX-Code


\size scriptsize 
            DATATYPE    => 'BIGINT', 
\layout LyX-Code


\size scriptsize 
            LENGTH      => '1', 
\layout LyX-Code


\size scriptsize 
            DESCRIPTION => 'sex', 
\layout LyX-Code


\size scriptsize 
            DEFAULT     => '', 
\layout LyX-Code


\size scriptsize 
            CHECK       => ['ForeignKey codes db_code', 'NotNull'], 
\layout LyX-Code


\size scriptsize 
            CHECK1      => ['ForeignKey codes db_code'], 
\layout LyX-Code


\size scriptsize 
            MODIFY      => ['Encode SEX'], 
\layout LyX-Code


\size scriptsize 
            ERROR       => [], 
\layout LyX-Code


\size scriptsize 
}, 
\layout LyX-Code


\size scriptsize 
col003 => {          
\layout LyX-Code


\size scriptsize 
            DATA        => '',          
\layout LyX-Code


\size scriptsize 
            DB_COLUMN   => 'db_breed',          
\layout LyX-Code


\size scriptsize 
            DATATYPE    => 'BIGINT',          
\layout LyX-Code


\size scriptsize 
            LENGTH      => '2',          
\layout LyX-Code


\size scriptsize 
            DESCRIPTION => 'breed',          
\layout LyX-Code


\size scriptsize 
            DEFAULT     => '',          
\layout LyX-Code


\size scriptsize 
            CHECK       => ['NotNull', 'ForeignKey codes db_code'],    
      
\layout LyX-Code


\size scriptsize 
            MODIFY      => ['Encode BREED'],          
\layout LyX-Code


\size scriptsize 
            ERROR       => [],   
\layout LyX-Code


\size scriptsize 
}, 
\end_inset 


\layout Chapter

Writing Load Objects
\layout Standard

Load objects carry out the database manipulation originating from one record
 from a data stream.
 A load object groups together all database manipulations required for a
 separate selfcontained record from a data stream.
 As such all the database manipulations either fail (rollback
\begin_inset LatexCommand \index{rollback}

\end_inset 

) or succeed (commit
\begin_inset LatexCommand \index{commit}

\end_inset 

).
 It is important to notice that a LO is completely self contained.
 Its only connection to the outside world is the model file (which is implicit)
 and the LO_keys.
 These are in fact the fields that constitute the data stream under consideratio
n.
 Being selfcontained and parameterized from the outside the load object
 can either be called from a batch
\begin_inset LatexCommand \index{Datastream!batch}

\end_inset 

 program or an interactive GUI program
\begin_inset LatexCommand \index{Datastream!GUI}

\end_inset 

.
 
\layout Standard

In case some of the business rules are violated, the transaction is aborted
 and rolled back (in case some database modifications were already done).
 The errors are returned in a data structure of its own and leave it processing
 to the calling program.
 In batch processing the errors are written into the appropriate database
 tables, GUIs usually have to shown the errors in the form immediately.
\layout Standard

One function of the load objects is the relate error to the fields that
 held the data.
 These are usually the keys in the LO_keys.
 However, when 'encode' is used in the MODIFY part of the model file, this
 may become quite involved.
 Consider the database column db_animal.
 This is the internal animal number after translation from the outside external
 identifications to the internal.
 In particular, db_animal is a function of db_unit which in turn is derived
 from CLASS / EXT_code.
 This means that db_animal depends on three external identifications.
 In this case all three may get marked as being the culprit.
\layout Section

The pseudo SQL code, general syntax
\layout Standard

The connection between the source data fields and the checking in the business
 rules layer (well hidden in the routine meta_db which is called in the
 load object) is derived from the pseudo SQL code used for database modification
s in the LO.
 Up to now select, insert and update statements could be used with these
 pseudo SQL syntax.
 The example in table 
\begin_inset LatexCommand \ref{pseudoSQL}

\end_inset 

 implies an insert of a record in table MYTABLE with the columns animal_nr,
 weight, and weigh_dt.
 The values for the three columns are taken from the perl variables $animal_nr,
 $weight, and $measure_dt.
 It is a requirement that these source variables are part of the data input
 hash LO_keys to the LO.
 Typically, they will come from the outside world (outside the LO) either
 from INSPOOL records for batch programs or the GUI fields for GUI programs.
 These keys are also used in the error hash (for description see 
\begin_inset LatexCommand \ref{errorhash}

\end_inset 

)to collect any errors that may occur during execution of the business rules.
\layout Standard

Sometimes data elements are also generated in the LO itself.
 This may be the case in the processing of birth records in pigs, where
 individual piglet identifications are generated on the basis of number
 of piglets born (see LO_DS02 for an example).
 Here, we would have additional source variables that are not part of the
 input hash LO_hash.
 If this variable is to be used in the pseudo SQL code and must be added
 to the hash LO_keys.
 Only then can the error processing code the 'culprit' i.e.
 the source variable responsible for the error (should there be an error).
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{pseudoSQL}

\end_inset 

the pseudo SQL in the load objects
\layout LyX-Code
\align block 
$pseudo_sql[0]= (
\layout LyX-Code

       'INSERT into MYTABLE (
\layout LyX-Code

                animal_nr,  weight,   weigh_dt
\layout LyX-Code

       )VALUES (
\layout LyX-Code

               $animal_nr, $weight, $measure_dt)'
\layout LyX-Code

);
\end_inset 


\layout Standard

In the following we will discuss the load object LO_DS01.pm
\begin_inset LatexCommand \index{Load Object!LO\_DS01.pm}

\end_inset 

 with the matching DS01.pm
\begin_inset LatexCommand \index{Datastream!DS01.pm}

\end_inset 

 as it is used in batch processing.
\layout Section

The pseudo SQL code with ENCODING
\layout Standard

The APIIS design feature to disconnect the outside coding from it internal
 representation, while providing flexibility for future changes, does require
 additional action during database access.
 This action is the required translation of any external coding into internal
 codes used throughout the database.
 There are two ways to deal with this translation.
 Firstly, in the LO the programmer can retrieve the internal codes by using
 standard DBI accesses to the database and then use the retrieved internal
 codes in the pseudo SQL code.
 While it provides flexibility, it does require error handling which can
 be avoided by using the second mechanism.
\layout Standard

Here, the model file contains in the MODIFY rule the expression ENCODING
 as described in table 
\begin_inset LatexCommand \ref{encode}

\end_inset 

.
 If this is used, the BR layer must only contain external codes and not
 internal ones.
\layout Section

The error hash
\begin_inset LatexCommand \label{errorhash}

\end_inset 


\layout Standard

The generell structure of the error hash is described in the library Apiis::Error
s.
 The predefined keywords and structure is shown in Table 
\begin_inset LatexCommand \ref{cap:Structure-of-error}

\end_inset 

.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

Structure of error hash
\begin_inset LatexCommand \label{cap:Structure-of-error}

\end_inset 


\layout LyX-Code


\size footnotesize 
my @type_values = qw/ DATA DB OS PARSE CODE PARAM CONFIG UNKNOWN /; 
\layout LyX-Code


\size footnotesize 
# Error types: 
\layout LyX-Code


\size footnotesize 
# DATA the passed data is not ok (usually in CheckRules)               
 
\layout LyX-Code


\size footnotesize 
# DB errors from the database (e.g.
 unique index violation) 
\layout LyX-Code


\size footnotesize 
# OS errors from the operation system (e.g.
 full hard disk) 
\layout LyX-Code


\size footnotesize 
# PARSE errors in ParsePseudoSQL with parsing pseudo SQL code 
\layout LyX-Code


\size footnotesize 
# CODE programming errors, e.g.
 from applications like load objects 
\layout LyX-Code


\size footnotesize 
# PARAM passed parameter is wrong or missing 
\layout LyX-Code


\size footnotesize 
# CONFIG one of the configuration files is wrong or has missing entries
 
\layout LyX-Code


\size footnotesize 
# UNKNOWN is unknown :^)
\layout LyX-Code


\size footnotesize 
my @severity_values = qw/ FATAL NON-FATAL /; 
\layout LyX-Code


\size footnotesize 
my @action_values = qw/ INSERT UPDATE DELETE SELECT DECODE ENCODE UNKNOWN
 /;
\layout LyX-Code


\size footnotesize 
# structure of error messages:
\layout LyX-Code


\size footnotesize 
my %struct; tie %struct, 'Tie::IxHash';
\layout LyX-Code


\size footnotesize 
%struct = ( type => undef, # predefined values above 
\layout LyX-Code


\size footnotesize 
        severity => undef, # predefined values above 
\layout LyX-Code


\size footnotesize 
          action => undef, # predefined values above
\layout LyX-Code


\size footnotesize 
            from => undef, # location where this error comes from (e.g.
 sub, rule) 
\layout LyX-Code


\size footnotesize 
       record_id => undef, # id of this record, e.g.
 record_seq from inspool
\layout LyX-Code


\size footnotesize 
            unit => undef, # unit that provides this data
\layout LyX-Code


\size footnotesize 
        db_table => undef, # database table concerned
\layout LyX-Code


\size footnotesize 
       db_column => undef, # database column concerned
\layout LyX-Code


\size footnotesize 
            data => undef, # just handled incorrect data
\layout LyX-Code


\size footnotesize 
        ext_cols => undef, # involved external columns (array)
\layout LyX-Code


\size footnotesize 
              ds => undef, # data stream name
\layout LyX-Code


\size footnotesize 
        err_code => undef, # coded error message
\layout LyX-Code


\size footnotesize 
       msg_short => undef, # main error message for end users
\layout LyX-Code


\size footnotesize 
        msg_long => undef, # detailed error message
\layout LyX-Code


\size footnotesize 
           misc1 => undef, # user defined scalar
\layout LyX-Code


\size footnotesize 
           misc2 => undef, # user defined scalar
\layout LyX-Code


\size footnotesize 
       misc_arr1 => undef, # user defined array
\layout LyX-Code


\size footnotesize 
       misc_arr2 => undef, # user defined array
\layout LyX-Code


\size footnotesize 
          ); 
\end_inset 


\layout Section

An example: The Load Object LO_DS01
\begin_inset LatexCommand \index{Load Object!LO\_DS01}

\end_inset 


\layout Standard

The simple load object LD_DS01 performs the database actions related with
 a new insemination record.
 In this example it needs to do:
\layout Enumerate

Insert new record into SERVICE
\begin_inset LatexCommand \index{table!SERVICE}

\end_inset 

 
\layout Enumerate

Update last action (la_rep) in ANIMAL
\begin_inset LatexCommand \index{table!ANIMAL}

\end_inset 


\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption


\family typewriter 
\size small 
LO_DS01.pm
\begin_inset LatexCommand \label{tab:LO-DS01.pm}

\end_inset 


\begin_inset LatexCommand \index{Load Object!LO\_DS01.pm}

\end_inset 


\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 1 #####################################################################
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 2 # $Id: actual_docu.lyx,v 1.38 2004/02/10 07:50:33 heli Exp $
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 3 # This is the Load Object for a new insemination record.
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 4 # It is responsible to:
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 5 #\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 1.
 Insert new record into SERVICE
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 6 #\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 2.
 Update last action (la_rep) in ANIMAL
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 7 #####################################################################
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 8 sub LO_DS01 {
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
 9\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my %data_hash = %{ shift () };
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
10\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
11 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
12\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # These are the required LO_keys for DS01.pm:
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
13\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my @LO_keys = qw( dam_hb_nr dam_society dam_breed sire_hb_nr
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
14\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sire_society sire_breed service_dt );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
15 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
16\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # some basic checks:
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
17\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my ( $err_status, $err_ref ) = CheckLO( 
\backslash 
%data_hash, 
\backslash 
@LO_keys );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
18\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 return ( $err_status, $err_ref ) if $err_status;
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
19 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
20\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my @pseudo_sql;
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
21\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $pseudo_sql[0] = (
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
22\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 'INSERT into service (
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
23\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 db_animal,
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
24\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 db_sire,
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
25\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 service_dt,
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
26\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 db_service_typ
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
27\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 ) VALUES (
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
28\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 concat( "society|sex", $dam_society."|2", $dam_hb_nr ),
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
29\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 concat( "society|sex", $sire_society."|1", $sire_hb_nr ),
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
30\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $service_dt,
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
31\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 "insem")'
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
32\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
33 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
34\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $pseudo_sql[1] = (
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
35\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 'UPDATE animal SET
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
36\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 la_rep\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 = "SERVICE",
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
37\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 la_rep_dt = $service_dt
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
38\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 where db_animal = concat( "society|sex", $dam_society."|2", $dam_hb_nr
 )'
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
39\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
40 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
41\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $dbh->commit;\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # clean start of transaction
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
42\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $hash_ref = meta_db( 
\backslash 
@pseudo_sql, 
\backslash 
%data_hash );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
43\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $hash_ref->{err_status} ? $dbh->rollback : $dbh->commit;
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
44\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 return ( $hash_ref->{err_status}, $hash_ref->{err_ref} );
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
45 }
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
46 
\layout Standard


\family typewriter 
\size small 
\SpecialChar ~
47 1;
\end_inset 


\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
9\SpecialChar ~
--\SpecialChar ~
10: The input parameters are passed from DS01 (or from a GUI_DS01)
 (via subroutine 
\family typewriter 
\size scriptsize 
Process_LO_Batch
\family default 
\size default 
).
 Some data streams need the reporting unit for their processing, others
 (like LO_DS01) can simply ignore it.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
13\SpecialChar ~
--\SpecialChar ~
14: This defines the names of the external data fields which have
 to be used by any program that sends data to this load object.
 (Actually, LO_keys is a sufficient set of information to run the Load Object.
 It needs to be derived directly from the data streams that should have
 been described before.)
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
17\SpecialChar ~
--\SpecialChar ~
18: CheckLO test the accordance of LO_keys with the keys of the
 %data_hash.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
20\SpecialChar ~
--\SpecialChar ~
39: A SQL-like description language is used to pass the parameters
 to the subsequent processing.
 This PseudoSQL is described in section .
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
41: A commit
\begin_inset LatexCommand \index{database!commit}

\end_inset 

 to the database is executed to start this transaction with a well defined
 status.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
42: All needed parameters (PseudoSQL and the data hash) are passed to
 the subroutine meta_db() which prepares and executes the database actions.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
43: Depending of the return status of meta_db() the transaction is committed
 or rolled back
\begin_inset LatexCommand \index{database!rollback}

\end_inset 

.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
44: The load object returns either success ($err_status = 0) or an error
 status > 0 and the accompanied error messages.
\layout Subsection

Passing parameters with PseudoSQL
\begin_inset LatexCommand \label{section:PseudoSQL}

\end_inset 


\begin_inset LatexCommand \index{Load Object!PseudoSQL}

\end_inset 


\layout Standard

To pass the parameters to the subroutine meta_db() for database transactions
 it was decided to choose a SQL-like syntax.
 This description language is parsed later to extract the important variables
 and data.
 These are the rules for parsing PseudoSQL: 
\layout Itemize

The Pseudo-SQL-Statements must be surrounded by 
\series bold 
single
\series default 
 quotation marks.
 No substitution of the Perl variables should take place.
 PseudoSQL is only an artificial language to pass the parameters.
 Strings inside these statements must be framed by 
\series bold 
double
\series default 
 quotation marks.
 
\newline 
Example: 
\family typewriter 
\size small 
$pseudo_sql[0] = 'INSERT into litter ( db_animal, delivery_dt, comment )
 VALUES ( $dam_hb_nr, $delivery_dt, "this is a comment" );
\family default 
\size default 
 
\layout Itemize

To concatenate values you can use the key word 'concat'.
 The single elements of this concatenation must be separated by commas.
 Fixed strings and variables can be mixed.
 The Perl concatenation operator .
 can also be used.
 
\newline 
Example: 
\family typewriter 
\size small 
concat( "society|sex", $dam_society .
 "|2", $dam_hb_nr )
\layout Itemize

Variables, whose names do not point to an external field of the incoming
 data stream can be assigned external names in brackets.
 The names in brackets 
\series bold 
must
\series default 
 be surrounded by double quotation marks in total, not every single element.
 
\newline 
Examples: 
\family typewriter 
\size small 
$piglet["start_notch_no, born_alive_no"] concat("society|sex", $dam_society
 ."|2", $piglet["start_notch_no, born_alive_no"])
\family default 
\size default 
 
\layout Itemize

Do you use a variable that does not point to any external field you have
 to supply this variable with empty brackets.
 
\newline 
Example: 
\family typewriter 
\size small 
$today[]
\layout Itemize

All variables, that you use in the Pseudo-SQL-Statements have to appear
 as a key (without the dollar character $) in the %data_hash which you pass
 to meta_db().
 Usually this will be the (already existing) field names of the incoming
 data.
 You have to add variables which newly appear in the load object like $piglet,
 $today, $now or also the separately passed external unit $ext_unit.
 Just have a look into LO_DS02.pm for some examples.
\layout Section

Calling a Load Object and some other issues
\layout Standard

As stated above a load object needs to get its input values (i.e.
 the data elements defined for that particular data stream) from a calling
 program.
 There are two modes how this can be done: input comes from a batch program,
 i.e.
 data are read from a file or data are entered via a GUI
\begin_inset LatexCommand \index{GUI}

\end_inset 

 program.
 A description of the former is to be found in the inspool section of this
 document.
 GUI programs on the other hand can be created automatically by the program
 mkLOform which may be called as: 
\family typewriter 
mkLOform LO_* '$APIIS_LOCAL/model/apiis.model'
\family default 
 
\begin_inset LatexCommand \index{mkLOform}

\end_inset 

.
 As output it creates for each matching load object one GUI program.
 What happens is that mkLOform picks up the LO_key
\begin_inset LatexCommand \index{key}

\end_inset 

 line from the load object which holds all elements defined for the data
 stream.
 Then it creates for each of these elements one GUI field.
 The GUI program can be run right away allowing the user to enter data into
 the fields and sending them to the load object by pressing the insert button.
 From there on the load object takes over doing all the database interactions
 defined under the control of the business rules.
\layout Standard

The fields in the GUI program can be moved around the canvas using the FormDesig
ner 
\begin_inset LatexCommand \index{FormDesigner}

\end_inset 

to suit the artistic and ergonomic requirements of the user.
\layout Standard

Sometimes data need to be derived from individual data.
 One example is the individual recording of piglet weight at birth from
 which we may want to derived the total number born, the sum of males and
 female piglets and the total litter weight at birth (while this implies
 redundancy we still may want to do it).
 To generate these sums in a Perl code is very easy, thus doing this in
 the load object is a piece of cake.
 However, there is the problem of not knowing in advance how many piglet
 a litter has.
 One way of approaching this problem would be to have one record for the
 sow and birthdate and the one for each piglet.
 This has a number of problems: firstly, the complete set of information,
 i.e.
 all the records pertaining to one litter constitute a transaction.
 If we split this up into separate database activities, we cannot roll the
 already entered data back should a later database action require this.
 Secondly, one litter plus the piglet information are infact a unit that
 the person entering the data would like to see as one block.
 Thus, it would be desirable to have the GUI form start with the block on
 the sow and then have one line for each piglet.
 Thus, we would need to have enough space for a litter, 20 lines should
 be ok.
 Then after the last piglet has been entered the complete form content will
 be processed by the load object and do the necessary accumulations on those
 variables that are not undef.
 The program mkLOform 
\begin_inset LatexCommand \index{mkLOform}

\end_inset 

 will then again generate the GUI program.
 Because it places all fields below each other FormDesigner
\begin_inset LatexCommand \index{FormDesigner}

\end_inset 

 will have to be used to arrange the fields in a more meaningful way.
\layout Standard

This little paragraph reflect the progress made since the last one was written.
 Because we are essentially lazy people Hartmut has meanwhile rewritten
 mkLOform
\begin_inset LatexCommand \index{mkLOfrm}

\end_inset 

 into mkLOfForm
\begin_inset LatexCommand \index{mkLOfForm}

\end_inset 

 (make formatted forms from load objects) which produces GUI programs on
 the basis of the LO_Keys from the load objects that does multiple fields
 per line.
 This is simply done by arranging the entries in the LO_Keys as is desired
 in the GUI program.
 An example is given in table 
\begin_inset LatexCommand \ref{cap:Arrangement-of-keys}

\end_inset 

.
 The arrangement given will result in a GUI program with 5 lines.
 The first would be one field with ext_unit, the second line would hold
 the three fields dam_hb_nr, dam_society and dam_breed.
 The program is given in figure 
\begin_inset LatexCommand \ref{cap:GUI-program-automatically}

\end_inset 

.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{cap:Arrangement-of-keys}

\end_inset 

Arrangement of keys for the GUI program
\layout LyX-Code


\size scriptsize 
   my @LO_keys = qw ( 
\layout LyX-Code


\size scriptsize 
                     ext_unit                       
\layout LyX-Code


\size scriptsize 
                     dam_hb_nr     dam_society     dam_breed
\layout LyX-Code


\size scriptsize 
                     sire_hb_nr    sire_society    sire_breed
\layout LyX-Code


\size scriptsize 
                     parity        start_notch_no  delivery_dt        
\layout LyX-Code


\size scriptsize 
                     born_alive_no weaned_no       weaning_dt          
        
\layout LyX-Code


\size scriptsize 
                    ); 
\end_inset 


\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed true

\layout Caption


\begin_inset LatexCommand \label{cap:GUI-program-automatically}

\end_inset 

GUI program automatically created from LO_DS02.pm
\layout Standard
\align center 

\begin_inset Graphics
	filename LO_DS02frm.png
	scale 40
	rotateOrigin center

\end_inset 


\end_inset 


\layout Chapter

Initial Loading of Historic Data
\layout Standard

Very rarely, a new information system can be set up without any previouly
 collected data.
 This implies the necessity to load all previously collected data into the
 new database before the routine data flow can start reaching the database.
 Historic data will typically be available from a number of different and
 often independant source or oven organization.
 As a consequence, many logical inconsistancies will be found in the data
 once they are loaded into a target structure that defines a possibly stringent
 set of business rules.
 As historic data may come in non predictable way (many files, any format),
 a procedure was developed which is as far as possible generic and thereby
 adaptable to any type of animal data recording system.
 It therefore allows any number of data files to be involved and furthermore,
 develops a strategy to deal with the potentially large number of errors
 that will become obvious once loaded into the business rule centered database.
\layout Section

The General Procedure
\layout Standard

Once the structure of the database has been defined it has to be populated
 with historic data, i.e.
 information already available in some computer compatible form.
 As has been described above, all external codes or identifications are
 translated into internal database codes to allow for reuse of external
 codes should the meaning of them change at some time.
 
\layout Enumerate

Operate on codes and external identification
\begin_deeper 
\layout Enumerate

Collect all temporary external codes
\layout Enumerate

check external codes and determine their target code to go into the database
\layout Enumerate

determine illegal values and handle them
\layout Enumerate

identify and handle duplicate identifications
\layout Enumerate

create input channels for corrected external codes in the database.
 The external codes can thus also be viewed as foreign keys which need to
 be available in the database prior to load the data.
\end_deeper 
\layout Enumerate

Operate on data
\begin_deeper 
\layout Enumerate

load historic data using the channels created in the previous step
\layout Enumerate

verify the loaded data against the business rules and flag records with
 errors in the database
\end_deeper 
\layout Enumerate

Wrap up
\begin_deeper 
\layout Enumerate

rewrite the temporary external animal identification to the external IDs
 reaching the database in routine data flow
\end_deeper 
\layout Standard

Now we shall describe the steps in a little more detail.
\layout Enumerate

Operate on codes and external identification
\begin_deeper 
\layout Standard

In this step only external codes and external identifications are considered,
 leaving other data on animals like their measurement aside.
 It is a step which basically collects, edits and loads Foreign Key information
 into the database.
 From the programming perspective, this process can be highly generic with
 little programming required by the adaptor (once the generic code has been
 written).
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

Collect all external codes
\begin_inset Quotes erd
\end_inset 

: In APIIS we have three groups of external codes:
\begin_deeper 
\layout Itemize

animal identifications; this can be any combinations of data fields that
 identify an animal uniquely in the historic data set.
 This is not necessarily the external ID that may be used in later routine
 data reporting.
 Its sole purpose is to identifiy individual animals correctyl in the historic
 data sets.
 The definition of this temporary external ID can be different from the
 external IDs used and reported during routine data flow.
\layout Itemize

an address or partner identification
\layout Itemize

classical codes like the numeric representation of a breed or a code for
 a certain abnormality
\end_deeper 
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

check external codes
\begin_inset Quotes erd
\end_inset 

: like all data also identifications and codes can be erroneous or inconsistant.
 As an example the breed 
\begin_inset Quotes eld
\end_inset 

Pietrain
\begin_inset Quotes erd
\end_inset 

 may be coded in some files as 
\begin_inset Quotes eld
\end_inset 

PI
\begin_inset Quotes erd
\end_inset 

 in others as 
\begin_inset Quotes eld
\end_inset 

pi
\begin_inset Quotes erd
\end_inset 

.
 Not only should the data made consistant but also a procedure must exist
 to handle records that are identified as being incorrect.
 The basic principles that we have followed is to provide for each external
 code or identication the opportunity to translate it into a new target
 value or as illegal by manual intervention.
 Then in the following process (like loading of data) any occurence of the
 original value will be replaced by its translated value.
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

determine illegal values
\begin_inset Quotes erd
\end_inset 

: some identifications will be illegal.
 For example, unknown sires may be codes as 
\begin_inset Quotes eld
\end_inset 

\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~

\begin_inset Quotes erd
\end_inset 

 or as 
\begin_inset Quotes eld
\end_inset 

999999
\begin_inset Quotes erd
\end_inset 

.
 These are not legal external identifications, and should thus not be used
 to create a data channel.
 Also, if these IDs come up later on in the loading process they should
 be skipped.
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

duplicates
\begin_inset Quotes erd
\end_inset 

: The same ID must not be used for different animals.
 This can happen when animal IDs are being reused after a number of years.
 For some records we know that they should appear only once for an animal:
 a field performance test may be an example.
 Here we can test for multiple occurences.
 If duplicates are found then human interaction is required to resolve the
 problem.
 
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

create input channnels
\begin_inset Quotes erd
\end_inset 

: Once all the target codes have been established by manual human intervention,
 likewise duplicates and undefined IDs have been dealt with, the external
 IDs get loaded into the database.
 This populate the tables TRANSFER , CODES and UNIT.
\end_deeper 
\layout Enumerate

Operate on data
\begin_deeper 
\layout Standard

After the 
\begin_inset Quotes eld
\end_inset 

foreign keys
\begin_inset Quotes erd
\end_inset 

 have been collected, edited and loaded in the first block, now actual measureme
nts have to be loaded into the database.
 The translation tables edited manually in the first step are also used
 here as filter.
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

load historic data
\begin_inset Quotes erd
\end_inset 

: For each file containing historic data a load program has to be written.
 This requires knowledge of the structure of the data files and the database.
 The definition of the external codes are identical to those in the first
 step.
 They are then passed through the translation created by manual intervention.
 However, the business rule layer is bypassed as time sequence dependant
 checks cannot be made because data get processed in random order.
\layout Enumerate


\begin_inset Quotes eld
\end_inset 

Verify the loaded data
\begin_inset Quotes erd
\end_inset 

: Thus far all database modifications have bypassed the business rule layer
 of the model file.
 The business rule set can only be used if data come in correct time sequences
 which clearly cannot be done when loading historic data.
 Thus, conflicts with the business rules can be expected.
 Rows violating the business rules will be flagged 
\begin_inset Quotes eld
\end_inset 

dirty
\begin_inset Quotes erd
\end_inset 

.
 This allows a selection of correct data during later database operation.
 Furthermore, 
\begin_inset Quotes eld
\end_inset 

dirty
\begin_inset Quotes erd
\end_inset 

 records can be cleaned up successively later on.
\end_deeper 
\layout Enumerate

Wrap up
\begin_deeper 
\layout Standard

In the previous step all historic data has been loaded, verified against
 the business rules and flagged accordingly.
 Now the routine data flow can start using the data stream model.
 But before this can be done, the data channels may have to be translated
 from the temporary external animal ID to the ID that comes in via the routine
 data streams.
 The temporariy external IDs were created for the purpose of uniquely identifyin
g data records in the historic datasets.
 Thus, after loading, they have served their purpose and may be modified.
 In the historic dataset, initially there may have been duplicate IDs refering
 to different animals.
 By adding the birth year they would have been made unique: 4711 in 1990
 and in 1999 would have been identified as 4711|90 and 4711|99.
 The former animal will not be active any more while data for the latter
 will still come into the system.
 However, it will be identified in the data stream only as 4711.
 Thus, its external number can be changed to 4711.
 Accordingly, incoming data to animal 4711 will find an open data channel
 and be translated to the correct internal database number.
\end_deeper 
\layout Section

Description of the loading process for the reference database
\layout Standard

As indicated above the reference database contains a script that should
 carry out all steps to create the actual reference database starting with
 the initial ASCII files containing the historic data.
 Prerequisites are:
\layout Itemize

set APIIS_LOCAL to $APIIS_HOME/apiis (with bash: export APIIS_LOCAL=$APIIS_HOME/apii
s)
\layout Itemize

add bin/ and lib/ to the search path (with bash: export PATH=$PATH:$APIIS_HOME/bi
n:$APIIS_HOME/lib: ...)
\layout Itemize

the postmaster has to be up and running (use the -F option to speedup loading;
 possible -i to accept TCP/IP connections)
\layout Itemize

the current user has to have the right to create and destroy a database
\layout Itemize

run runall.pl 
\begin_inset LatexCommand \index{runall.pl}

\end_inset 

 (the total one may take a couple of hours or so depending on the speed
 of the computer, because the check routines need a lot of time; 7 hours
 on pIII 256 Mb RAM, until check_integrity nearly 3 hours)
\layout Itemize

a log is written as runall.log
\begin_inset LatexCommand \index{runall.log}

\end_inset 

 for the succesfull run and as runall_long.log
\begin_inset LatexCommand \index{runall\_long.log}

\end_inset 

 for statistics in data loading
\layout Standard

In the following we shall describe the procedure which is generally applicable
 to any loading process of historic data (as we hope).
 However, we shall use the reference database for detail description.
 Table 
\begin_inset LatexCommand \ref{runall.pl}

\end_inset 

 gives a listing of the perlscript.
 To load the complete reference database no configuration is necessary.
 However, this script can also be used as the basis for user specific loading.
 Then the following lines need adaptation:
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
42 for testing purposes it is useful to load only a (consistant) subset
 of all historic data.
 The number of records loaded is set via $max_rec.
 To load all data use a number larger than the number of records in the
 data file accessed in program collect_ext_id.pl
\begin_inset LatexCommand \index{collect\_ext\_id.pl}

\end_inset 


\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
44\SpecialChar ~
etc the array @job holds all the programs that need to run.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

creating the complete reference database (runall.pl)
\begin_inset LatexCommand \label{runall.pl}

\end_inset 


\layout LyX-Code


\size scriptsize 
@jobs = ( 
\layout LyX-Code


\size scriptsize 
"add_codes.pl",                                        # step 1 insert additional
 codes (are not from data)
\layout LyX-Code


\size scriptsize 
"collect_ext_id.pl -i -m $max_rec",                    # step 2 find all
 ext.
 id and leave UNDEFINED in file 
\layout LyX-Code


\size scriptsize 
                                                       # step 3 manual edit
 and rename to *.ok 
\layout LyX-Code


\size scriptsize 
"collect_ext_id.pl -d -n hb_not_uniq.txt -m $max_rec", # step 4 find duplicates
 
\layout LyX-Code


\size scriptsize 
                                                       # step 5 manual edit
 
\layout LyX-Code


\size scriptsize 
"collect_ext_id.pl -f dup_animal.chg.cvs -m $max_rec -c ignore_animal.ok", #
 step 6 
\layout LyX-Code


\size scriptsize 
"collect_codes1.pl -m $max_rec",                       # step 7 collect external
 codes
\layout LyX-Code


\size scriptsize 
                                                       # step 8 manual edit
 
\layout LyX-Code


\size scriptsize 
"collect_codes2.pl -f codes.chg.cvs",                  # step 9 insert codes
\layout LyX-Code


\size scriptsize 
"collect_job1.pl -m $max_rec",                         # step 10 collect
 external units
\layout LyX-Code


\size scriptsize 
                                                       # step 11 manual
 edit 
\layout LyX-Code


\size scriptsize 
"collect_job2.pl -f job.chg.cvs",                      # step 12 insert unit,
 address and naming
\layout LyX-Code


\size scriptsize 
"transfer_to_animal.pl",                               # step 13
\layout LyX-Code


\size scriptsize 
"load_data_herdbook.pl -f codes.chg.cvs -m $max_rec",  # step 14 load data
 from herdbook
\layout LyX-Code


\size scriptsize 
"load_data_station.pl -f codes.chg.cvs -m $max_rec",   # step 15          
      station
\layout LyX-Code


\size scriptsize 
"load_data_field.pl -f codes.chg.cvs -m $max_rec",     # step 16          
      field
\layout LyX-Code


\size scriptsize 
"load_data_litter.pl -f codes.chg.cvs -m $max_rec",    # step 17          
      litter
\layout LyX-Code


\size scriptsize 
"load_data_address.pl -f codes.chg.cvs -m $max_rec",   # step 18          
      address
\layout LyX-Code


\size scriptsize 
"clear_index.pl",                                      # step 19 clear index
 (must specified)
\layout LyX-Code


\size scriptsize 
"dates_to_transfer_hb.pl -m $max_rec",                 # step 20 complete
 transfer with dates from herdbook
\layout LyX-Code


\size scriptsize 
"dates_to_transfer_station.pl -m $max_rec",            # step 21        
                           station  
\layout LyX-Code


\size scriptsize 
"fill_last_action.pl",                                 # step 22 fill la_rep
 
\layout LyX-Code


\size scriptsize 
"post_initial.pl",                                     # step 23 rewrite
 ext_animal and create codes_unit.chg 
\layout LyX-Code


\size scriptsize 
                                                       # step 24 manual
 edit
\layout LyX-Code


\size scriptsize 
"collect_codes2.pl -f codes_unit.chg.cvs",             # step 25 insert new
 codes from post_initial 
\layout LyX-Code


\size scriptsize 
"check_integrity -f ../model/apiis.model -g check.erg",# step 26 check integrity
 against the businessrules
\layout LyX-Code


\size scriptsize 
);
\layout LyX-Code

\end_inset 


\layout Standard

Now the specific steps will be described on the basis of the reference database.
\layout Enumerate

make a list of all files that hold historic data
\layout Enumerate

start with identification of adult animals
\begin_deeper 
\layout Enumerate

determine the unique external id of the animal.
 In the reference dataset this is:
\begin_deeper 
\layout Enumerate

breed society (there are sires from other breed societys in station test
 records)
\layout Enumerate

herdbook number
\layout Enumerate

sex
\end_deeper 
\layout Enumerate

for each file determine the columns to create the EXT_ID on the above basis
\end_deeper 
\layout Enumerate

load all ext_ids in a vector and note unique (u) and multiple (m) with each
 ext_id:
\begin_deeper 
\layout List
\labelwidthstring 00.00.0000

m: multiple occurences to be expected, these are occurences as parents,
 or sows with litter records
\layout List
\labelwidthstring 00.00.0000

u: typically, in herdbook files we should have only one record for each
 ext_id.
 Thus, if an ext_id (as defined above) occurs more than once we know that
 we have a mistake.
\end_deeper 
\layout Standard

When developing a new information system on the basis of APIIS normally
 historic data exists that has been collected by some other system or by
 a number of different systems.
 The problems and procedures to integrate all historic data in a new consistent
 APIIS based system is described in this chapter.
\layout Standard

Because initial loading has to deal with data accumulated over time no time
 dependent business rules can be enforced.
 This means that during this phase the business rule
\begin_inset LatexCommand \index{business rules}

\end_inset 

 enforcement system will be switched off.
 However, this means that after this phase the freshly loaded system has
 to be verified extensively to match the accuracy requirements stated in
 the model file.
\layout Section

Initial Datasets
\layout Standard

Here it is assumed that the initial datasets are available in the form of
 flat ASCII files.
 These files constitute the complete historic data that are intended to
 be loaded into the central database.
 Furthermore, this implies that never more historic data is to be included.
 Thus, there will be only one initial step to load historic data.
 After this process has been carried out the newly established database
 will be the sole repository of the data.
 New data will afterwards be entered into the database via the time dependent
 stream entry using the model file.
\layout Standard

The files used in the reference database reside in the directory $APIIS_HOME/apii
s/initial and are:
\layout Enumerate

herdbook data
\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
dotfill
\end_inset 

 herdbook.dat
\layout Enumerate

field test data
\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
dotfill
\end_inset 

 field.dat
\layout Enumerate

station test data
\begin_inset ERT
status Collapsed

\layout Standard
 
\backslash 
dotfill
\end_inset 

 station.dat
\layout Enumerate

reproduction data 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
dotfill
\end_inset 

 litter.dat
\layout Enumerate

address data 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
dotfill
\end_inset 

 address.dat
\layout Standard

Loading historic data requires the following steps:
\layout Enumerate

list all data streams and their content (DS01 -- DSnn)
\begin_inset LatexCommand \label{enu:list-all-data-streams}

\end_inset 


\layout Enumerate

normalize the database structure
\begin_inset LatexCommand \label{enu:normalized-the-database}

\end_inset 


\layout Enumerate

list all files of historic data (in the reference database we have the 4
 files given above)
\begin_inset LatexCommand \label{enu:list-all-files-hist}

\end_inset 


\layout Enumerate

create external identifications for all animals referd to in the historic
 data files
\begin_inset LatexCommand \label{enu:create-external-identifications}

\end_inset 


\layout Enumerate

create all other foreign keys such as codes and addresses
\begin_inset LatexCommand \label{enu:create-all-other-FK}

\end_inset 


\layout Enumerate

load historic data
\begin_inset LatexCommand \label{enu:load-historic-data}

\end_inset 


\layout Enumerate

rewrite TRANSFER for currently used external identifications
\begin_inset LatexCommand \label{enu:rewrite-TRANSFER}

\end_inset 


\layout Comment

create conditional index in ENTRY
\begin_inset LatexCommand \label{enu:create-conditional-index-ENTRY}

\end_inset 


\layout Section

Step 1: adding code
\layout Standard

The program add_codes.pl
\begin_inset LatexCommand \index{add\_codes.pl}

\end_inset 

 is used to fill the codes
\begin_inset LatexCommand \index{codes}

\end_inset 

 table with the types that are being used in the later loading process (see
 
\begin_inset LatexCommand \ref{codes}

\end_inset 

).
 These are codes which are not came from data but from datastream and/or
 position in data, like type of the weight (station start test or fieldtest...)
 in table WEIGHT or role (breeder, owner) in table UNIT, where we have distinct
 columns in data.
 Entry and exit action are further examples.
 Here we can insert whole new classes or needed values which will come later
 in routine datachannels and are not present in historic data.
\layout Section

Step 2: Collecting all external animal identifications
\layout Standard

The step of creating external identifications (
\begin_inset LatexCommand \ref{enu:create-external-identifications}

\end_inset 

) is performed by the program collect_ext_id.pl
\begin_inset LatexCommand \index{collect\_ext\_id.pl}

\end_inset 

 which resides in apiis/initial.
 Prior to being able to load historic data external identifications in TRANSFER
 need to be created together with their internal database numbers.
\layout Standard

At this stage EXT_ID is defined as a concatenation of fields which is used
 in the historic dataset to make an identification unique.
 This may be society|hb_nr|sex .
 This same string will be used to load history data into the database in
 the following steps.
\layout Standard

This step is done by the program collect_ext_id.pl.
 The program is parameterized in a configuration block right at its beginning.
 The example from the reference database is given in figure 
\begin_inset LatexCommand \ref{config-block}

\end_inset 

.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{config-block}

\end_inset 

Configuration block of collect_ext_id.pl
\layout LyX-Code


\size scriptsize 
1 #########################################################
\layout LyX-Code


\size scriptsize 
2 # Begin configuration section: 
\layout LyX-Code


\size scriptsize 
3 #########################################################
\layout LyX-Code


\size scriptsize 
4 my @link = (
\layout LyX-Code


\size scriptsize 
5    'herdbook.dat', '2 1 0',       '8 7 c2 12',
\layout LyX-Code


\size scriptsize 
6    'station.dat',  'cstation 11', '8 9 c2 10');
\layout LyX-Code


\size scriptsize 
7 my @total = ( 
\layout LyX-Code


\size scriptsize 
8              [ 'field.dat'    , '2 1 c2 3'    , 'u' ], 
\layout LyX-Code


\size scriptsize 
9              [ 'field.dat'    , '2 1 c2'      , 'm' ], 
\layout LyX-Code


\size scriptsize 
10             [ 'herdbook.dat' , '2 1 0'       , 'u' ], 
\layout LyX-Code


\size scriptsize 
11             [ 'herdbook.dat' , '8 7 c2 12'   , 'u' ], 
\layout LyX-Code


\size scriptsize 
12             [ 'herdbook.dat' , '5 4 c1'      , 'm' ], 
\layout LyX-Code


\size scriptsize 
13             [ 'herdbook.dat' , '8 7 c2'      , 'm' ],
\layout LyX-Code


\size scriptsize 
14             [ 'station.dat'  , 'cstation 11' , 'u' ], 
\layout LyX-Code


\size scriptsize 
15             [ 'station.dat'  , '8 9 c2 10'   , 'u' ], 
\layout LyX-Code


\size scriptsize 
16             [ 'station.dat'  , '8 9 c2'      , 'm' ], 
\layout LyX-Code


\size scriptsize 
17             [ 'station.dat'  , '5 6 c1'      , 'm' ], 
\layout LyX-Code


\size scriptsize 
18             [ 'litter.dat'   , '2 1 c2'      , 'm' ], 
\layout LyX-Code


\size scriptsize 
19             [ 'litter.dat'   , '6 7 c1'      , 'm' ], );
\layout LyX-Code


\size scriptsize 
20
\layout LyX-Code


\size scriptsize 
21 my @regex = ( 
\layout LyX-Code


\size scriptsize 
22              [ '
\backslash 
|0$',       'notch_nr 0'    ], 
\layout LyX-Code


\size scriptsize 
23              [ '
\backslash 
|999999
\backslash 
|', 'inside 999999' ]  
\layout LyX-Code


\size scriptsize 
24             );
\layout LyX-Code


\size scriptsize 
#########################################################
\end_inset 


\layout Standard

Logically it breaks down into the following blocks:
\layout Enumerate

create LINK: in pigs we have different numbers or IDs in the historic datasets
 that refer to the same animal.
 This is usually the ID of the piglets that is kept through testing.
 Only after selection this animal gets a new number which is used for further
 reporting.
 Thus, the two ext_ids must refer to the same db_id, which is created as
 a counter.
 In this step two hashes are created from each link record, one for each
 ext_id holding the db_id.
 
\newline 
In line 5 those two sets of columns are given that refer to the animal identific
ation as young and as adult (selected) animals.
 The columns chosen are those that make the IDs unique in the complete data
 set.
 The first ID is made up of the columns 2, 1 and 0.
 This is herdbook society, herdbook number and sex.
 The second ID is made up of the dam herdbook society (column 8), the dam
 herdbook number (column 7), the sex of the dam (fix 2) and the running
 piglet number (column 12).
\newline 
Line 6 describe the link between mother number + notch number with the internal
 station number which will refer to the information from this datasource.
\layout Enumerate

for each historic dataset each ext_id (created as a concatenation as described
 above) is read one by one performing the following actions:
\begin_deeper 
\layout Enumerate

does ext_id exist in LINK(i)? if yes: use its DB_ID
\layout Enumerate

does EXT_ID exist in TOTAL? if yes: increment COUNT (if UNIQUE print error)
\newline 
If it does not exist insert and add DB_ID as an incremented counter
\end_deeper 
\layout Standard

It is configured also in figure 
\begin_inset LatexCommand \ref{config-block}

\end_inset 

 in lines 8 through 19.
 Notice the last column consisting of either 'u' or 'm'.
 This stands for unique or multiple and means if the ID given should be
 unique in the given file or if it can occur more than once.
 If the field test, only one record is allowed for each animal, thus, if
 it occurs more than once we know that there is a problem.
 Thus, the animal ID as given in line 8 must occur only once.
 On the other hand, the animals dam as given in line 9 will show up more
 than once.
 In this situation nothing can really be checked.
\layout Standard

Note, that ALL datafiles that constitute the historic data set must be searched
 for external IDs and be configured in this section.
 This clearly includes parents of animals that are tested at the station
 and in the field (here, we sometimes have sires from different herdbook
 societies which are not part of the breeding program (i.e.
 herdbook) under consideration.
\layout Standard

There are two problems that need attention at this point:
\layout Itemize

for some external IDs we know that they should occur only once.
 We have indicated this with a 'u' in the @total vector 
\begin_inset LatexCommand \ref{config-block}

\end_inset 

.
 If a this rule is violated we need to have means of resolving this problem.
 This will always require manual interference.
 In the first step collect_ext_id.pl (with option '-d') produces a file with
 duplicates with the name of 'dup_animal.chg'.
\layout Itemize

unknown animals need to be identified.
\layout Standard

In the third part (@regexp) we have an aditional block which should help
 to find unknown or probably incorrect external animal identifications.
 Here you can describe simple regular expressions that match the wanted
 identifikations.
 At the end of this operation two files are generated.
 
\layout Comment

The hash TOTAL with elements: EXT_ID and DB_ID is then used to insert records
 into transfer.
\layout Section

Step 3: Manual edit 
\layout Standard

The file 'ignore_animal.chg' (see figure 
\begin_inset LatexCommand \ref{ignore_animal.chg}

\end_inset 

), craeted with option '-i' on 'collect_ext_id.pl', contain only little statistic
 which could help to identify external animals where usually used as unknown
 animals.
 For example '999999' or for reference database '0|0|1'.
 To really ignore further these animals you must write these identifications
 into the file 'ignore_animals.ok' or use option '-c filename' for this file
 and leave only animals there which schould be ignored.
 (see file 'ignore_animal.ok' in directory apiis/initial for an example)
 If you need some more informations about the exact number of use the external
 animal identification in each input file you can use the option '-x' which
 create a file 'detailed_use' with this information.
\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

ignore_animal.chg
\begin_inset LatexCommand \label{ignore_animal.chg}

\end_inset 


\layout LyX-Code


\size footnotesize 
# leave only animals which schould be ignored 
\layout LyX-Code


\size footnotesize 
# and rename to ignored_animals.ok or use the option c 
\layout LyX-Code


\size footnotesize 
# ext_animal count 
\layout LyX-Code


\size footnotesize 
32|400080|1 2563 
\layout LyX-Code


\size footnotesize 
0|9999999|0 2001 
\layout LyX-Code


\size footnotesize 
32|400061|1 1686 
\layout LyX-Code


\size footnotesize 
32|100048|1 1663 
\layout LyX-Code


\size footnotesize 
32|400167|1 1655 
\layout LyX-Code


\size footnotesize 
32|253020|1 1605 
\layout LyX-Code


\size footnotesize 
: 
\layout LyX-Code


\size footnotesize 
0|0|1 591 
\layout LyX-Code


\size footnotesize 
0|0|2 586 
\layout LyX-Code


\size footnotesize 
0|0|2|0 577
\end_inset 


\layout Standard

The second file 'ignore_animal2.chg' cover the identifications from the defined
 regular expressions and also the animal identifikations which has uninitialised
 values inside the concatenation.
 An example see in figure 
\begin_inset LatexCommand \ref{cap:ignore_animal2.chg}

\end_inset 

.
 Now you have to decide which animals are used as unknown or if something
 wrong with the id.
 Also these identifikations has to be added into fiel 'ignore_animal.ok'.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

ignore_animal2.chg
\begin_inset LatexCommand \label{cap:ignore_animal2.chg}

\end_inset 


\layout LyX-Code


\size scriptsize 
32|999999|1 inside 999999 
\layout LyX-Code


\size scriptsize 
25|67682|2|0 notch_nr 0 
\layout LyX-Code


\size scriptsize 
32|104172|2|0 notch_nr 0 
\layout LyX-Code


\size scriptsize 
32|101338|2|0 snotch_nr 0 
\layout LyX-Code


\size scriptsize 
:
\layout LyX-Code


\size scriptsize 
||2| NULL values 
\layout LyX-Code


\size scriptsize 
||2 NULL values 
\end_inset 


\layout Section

Step 4: Find duplicates
\layout Standard

Use of 'collect_ext_id.pl' whith option '-d' create a file with the data
 of duplicated animals, if defined that these animals schould be unique
 in this file.
 (see file 'dup_animal.chg') To define ignored animals and find duplicates
 are two steps because animals to be ignored also could be duplicated...
\layout Section

Step 5: Manual edit of duplicates
\layout Standard

In this step you can change the external animal identification in dependence
 of the whole data for these animal (if you know which external identification
 is wrong).
 As example see file 'dup_animal.chg.cvs' (few lines are in figure 
\begin_inset LatexCommand \ref{dupl1}

\end_inset 

), where only in the case of station data it is possible to change the identific
ation.
 All other animals in this file will further be ignored in loading data,
 because nobody know if the external identification is ok.
 
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{dupl1}

\end_inset 

example for changed duplicates
\layout LyX-Code


\size footnotesize 
# change only ext_animal 
\layout LyX-Code


\size footnotesize 
# for example 32|133575|2|57 => 32|133575|2|58 
\layout LyX-Code


\size footnotesize 
# file ext_animal key line
\layout LyX-Code


\size footnotesize 
station.dat = 32|133575|2|
\series bold 
57
\series default 
 ( 8 9 c2 10 ) => 
\layout LyX-Code


\size footnotesize 
  ...|133575|
\emph on 
57
\emph default 
|202355|110|10.60|8.9.99 00:00:00|30.11.99 00:00:00|A9| ...
 
\layout LyX-Code


\size footnotesize 
station.dat = 32|133575|2|
\series bold 
58
\series default 
 ( 8 9 c2 10 ) => 
\layout LyX-Code


\size footnotesize 
  ...|133575|
\emph on 
57
\emph default 
|202349|110|12.40|8.9.99 00:00:00||| ...
\end_inset 


\layout Section

Step 6: Load external identifications
\layout Standard

This step really load the table TRANSFER with all external identifications
 and create the proper db_animal.
 Not inserted are the identifications from the file 'ignore_animal.ok' and
 the no edited animals from file 'dup_animal.chg.cvs'.
\layout Section

Step 7: Collecting and setting up CODES
\begin_inset LatexCommand \label{codes}

\end_inset 


\layout Standard

This block performed by the programs collect_codes1.pl
\begin_inset LatexCommand \index{collect\_codes1.pl}

\end_inset 

 and collect_codes2.pl 
\begin_inset LatexCommand \index{collect\_codes2.pl}

\end_inset 

which need to get adapted to the specific information system under consideration.
\layout Standard

The configuration block in collect_codes1.pl is given in table 
\begin_inset LatexCommand \ref{config_col_codes1}

\end_inset 

.
 Each line configures one column with codes.
 The files are again those that we had listed before.
 In 
\begin_inset Quotes eld
\end_inset 

herdbook.dat
\begin_inset Quotes erd
\end_inset 

 we have 6 columns with codes.
 They represent the sex of the animal, the breeds and the mhs (maligne hypthermi
a) status of the animal.
 Furthermore, breed society codes are to be found in 3 other columns.
 Notice, that we need to specify 
\noun on 
all
\noun default 
 occurences of codes.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

Configuration block for collect_codes1.pl
\begin_inset LatexCommand \label{config_col_codes1}

\end_inset 


\layout LyX-Code


\size scriptsize 
########################################################################
\layout LyX-Code


\size scriptsize 
# Begin configuration section: 
\layout LyX-Code


\size scriptsize 
########################################################################
\layout LyX-Code


\size scriptsize 
#               file          column    category
\layout LyX-Code


\size scriptsize 
my @total = ( 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '0'  , 'sex' ], 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '2'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '5'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '8'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '9'  , 'breed' ], 
\layout LyX-Code


\size scriptsize 
             [ 'herdbook.dat' , '20' , 'mhs' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '0'  , 'sex' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '2'  , 'breed' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '5'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '8'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '19' , 'group_sep' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '20' , 'group_box' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '29' , 'slaughter_house' ], 
\layout LyX-Code


\size scriptsize 
             [ 'station.dat'  , '34' , 'slaugter_remarks' ], 
\layout LyX-Code


\size scriptsize 
             [ 'field.dat'    , '0'  , 'sex' ], 
\layout LyX-Code


\size scriptsize 
             [ 'field.dat'    , '2'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'field.dat'    , '4'  , 'breed' ], 
\layout LyX-Code


\size scriptsize 
             [ 'litter.dat'   , '2'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'litter.dat'   , '4'  , 'breed' ], 
\layout LyX-Code


\size scriptsize 
             [ 'litter.dat'   , '6'  , 'society' ], 
\layout LyX-Code


\size scriptsize 
             [ 'litter.dat'   , '8'  , 'breed' ], 
\layout LyX-Code


\size scriptsize 
            ); 
\layout LyX-Code


\size scriptsize 
############################################################################
\layout LyX-Code

\end_inset 


\layout Standard

In historic data often many different codes are used for the same object.
 For instance for male animals we may find M, m and 1.
 These would have to be translated into one interal code number.
 A general procedure for loading CODES would follow these steps:
\layout Enumerate

count the number of raw tables (
\begin_inset Formula $n_{tables}$
\end_inset 

)
\layout Enumerate

for each table determine the columns that hold a code and give each a category
 name (column class in CODES)
\layout Enumerate

for each table:
\begin_deeper 
\layout Enumerate

column 1 do a select (code), count(code) group by code
\layout Enumerate

column 2 do a select (code), count(code) group by code
\end_deeper 
\layout Enumerate

this will result in a table like this:
\begin_deeper 
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="11" columns="7">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<column alignment="center" valignment="top" rightline="true" width="0pt">
<column alignment="center" valignment="top" rightline="true" width="0pt">
<row topline="true">
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Names
\end_inset 
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RAW table
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

column
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

content
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

n
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Target Code
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

short
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

long
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

231
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

01
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

212
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

m
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2121
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3212
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

01
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2123
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

ok
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

216
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

99
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3221
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_deeper 
\layout Enumerate

write this table to a file
\layout Standard

The program collect_codes1.pl produces as out the ASCII file codes.chg.
 A few lines from this file are given in figure 
\begin_inset LatexCommand \ref{codes.chg}

\end_inset 

.
 This file needs to get edited by the developer.
 
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{codes.chg}

\end_inset 

Output file codes.chg from collect_codes1.pl
\layout LyX-Code


\size tiny 
#######################################################################
\layout LyX-Code


\size tiny 
# seperate columns with blanks
\layout LyX-Code


\size tiny 
# if you have more than one word in some columns you must insert these between
 >'<
\layout LyX-Code


\size tiny 
# for example: breed raw_herdbook 2  02  8724 DL 'German Landrace' ' another
 kind of Landrace'
\layout LyX-Code


\size tiny 
# for undefined TARGET-CODE use NULL
\layout LyX-Code


\size tiny 
# CATEGORY           TABLE      COLUMN CONTENT    NUMBER    TARGET-CODE
   SHORTNAME LONGNAME DESCRIPTION
\layout LyX-Code


\size tiny 
#-------------------------------------------------------------------------------
----------------------------
\layout LyX-Code


\size tiny 
#------------------------------------------------------------------------
\layout LyX-Code


\size tiny 
BREED             field.dat     4      10                1  10
\layout LyX-Code


\size tiny 
BREED             field.dat     4      11                1  11
\layout LyX-Code


\size tiny 
BREED             field.dat     4      2                 1  2
\layout LyX-Code


\size tiny 
BREED             field.dat     4      DE             1769  DE
\layout LyX-Code


\size tiny 
BREED             field.dat     4      DL           145730  DL
\layout LyX-Code


\size tiny 
BREED             field.dat     4      LW               27  LW
\layout LyX-Code


\size tiny 
BREED             field.dat     4      PI             2551  PI
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      DE             1403  DE
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      DL            27479  DL
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      HA               55  HA
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      LW              149  LW
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      PI             3438  PI
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      Pi                1  Pi
\layout LyX-Code


\size tiny 
BREED             litter.dat    4      DE             1358  DE
\layout LyX-Code


\size tiny 
....
\end_inset 


\layout Section

Step 8: Manual edit of codes
\begin_inset LatexCommand \label{edit_codes}

\end_inset 


\layout Enumerate

manually, determine the target external code to be used in the system (this
 will be done with your favorite editor).
 This table holds for each category all the external codes allowed, e.g.
 category SEX may be M, F, C for male, female and castrate.
 Table CODES would translate SEX/F into an internal code used throughout
 the database.
 For unknown codes it is possible to use 'NULL' in column target code.
 The table will then look like this: 
\begin_deeper 
\layout Standard


\begin_inset  Tabular
<lyxtabular version="3" rows="10" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

RAW table
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

column
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

content
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

n
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

Target Code
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

231
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

M
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

01
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

212
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

M
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

m
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2121
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

M
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

herdbook
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

sex
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

f
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3212
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

F
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

01
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

2123
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard


\family roman 
ok
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

216
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

1
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

...
\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

litter
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

anomaly
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

99
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

3221
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

9
\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_deeper 
\layout Standard

Furthermore could be inserted the meaning of the additional columns in table
 CODES, like short name, long name and description.
 These meanings are filled only for one target code and could be also later
 filled from other source.
 The resultant file with the name codes.chg.cvs (which comes from cvs) is
 given in the figure 
\begin_inset LatexCommand \ref{codes.chg.cvs}

\end_inset 

.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption


\begin_inset LatexCommand \label{codes.chg.cvs}

\end_inset 

Edited output file codes.chg
\layout LyX-Code


\size tiny 
# seperate columns with blancs
\layout LyX-Code


\size tiny 
# if you have more than one word in some columns you must insert these between
 >'<
\layout LyX-Code


\size tiny 
# for example: breed raw_herdbook 2  02  8724 DL 'German Landrace' 'another
 kind of Landrace'
\layout LyX-Code


\size tiny 
# for undefined TARGET-CODE use NULL
\layout LyX-Code


\size tiny 
# CATEGORY           TABLE      COLUMN CONTENT    NUMBER    TARGET-CODE
   SHORTNAME LONGNAME DESCRIPTION
\layout LyX-Code


\size tiny 
#-------------------------------------------------------------------------------
----------------------------
\layout LyX-Code


\size tiny 
#------------------------------------------------------------------------
\layout LyX-Code


\size tiny 
BREED             field.dat     4      10                1  NULL
\layout LyX-Code


\size tiny 
BREED             field.dat     4      11                1  NULL
\layout LyX-Code


\size tiny 
BREED             field.dat     4      2                 1  NULL
\layout LyX-Code


\size tiny 
BREED             field.dat     4      DE             1769  DE DE 'German
 Large White' 'another kind of Large White'
\layout LyX-Code


\size tiny 
BREED             field.dat     4      DL           145730  DL DL 'German
 Landrace' 'another kind of Landrace'
\layout LyX-Code


\size tiny 
BREED             field.dat     4      LW               27  LW LW 'Large
 White'
\layout LyX-Code


\size tiny 
BREED             field.dat     4      PI             2551  PI PI 'German
 Pietrain'
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      DE             1403  DE
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      DL            27479  DL
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      HA               55  HA HA 'Hampshire'
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      LW              149  LW
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      PI             3438  PI
\layout LyX-Code


\size tiny 
BREED             herdbook.dat  9      Pi                1  PI
\layout LyX-Code


\size tiny 
BREED             litter.dat    4      DE             1358  DE
\layout LyX-Code


\size tiny 
....
\end_inset 


\layout Section

Step 9: Load edited codes
\layout Standard

Run the program collect_codes2.pl 
\begin_inset LatexCommand \index{collect\_codes2.pl}

\end_inset 

 which reads the above edited file and loads it into codes.
\layout Section

Step 10: Collect jobs
\layout Standard

The general procedure is the same as in collect codes, see above.
 The differences result from the specific table structure for UNIT, ADDRESS
 and NAMING.
 
\layout Section

Step 11: Manual edit of Jobs
\layout Standard

Here you can specify if you want different db-sequences for the same person
 in different jobs.
 These are necessary when the same person can be either breeder or owner.
 Then you need two different entrys in UNIT but possible only one entry
 in ADDRESS and/or NAMING.
 As an example see file job.chg.cvs and figure 
\begin_inset LatexCommand \ref{job.chg}

\end_inset 

.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

job.chg
\begin_inset LatexCommand \label{job.chg}

\end_inset 


\layout LyX-Code


\size footnotesize 
# seperate columns with blancs 
\layout LyX-Code


\size footnotesize 
# for undefined TARGET-CODE use NULL 
\layout LyX-Code


\size footnotesize 
# when you need distinct sequence for db_name and db_address: see example
 
\layout LyX-Code


\size footnotesize 
# below first 3 jobs get the same db_name but foster breeder get another
 db_address 
\layout LyX-Code


\size footnotesize 
# BREEDER     raw_herdbook    hb_zue_nr   208  21    208 
\layout LyX-Code


\size footnotesize 
# OWNER       raw_herdbook    owner_nr    208  12    208 BREEDER BREEDER
 
\layout LyX-Code


\size footnotesize 
# F_BREEDER   raw_herdbook    hb_auf_nr   208  2     208 BREEDER '' 
\layout LyX-Code


\size footnotesize 
# SOCIETY     raw_herdbook    society_nr  208  102   208 
\layout LyX-Code


\size footnotesize 
# the foster breeder below get the same db_name and db_address as breeder
 208 
\layout LyX-Code


\size footnotesize 
# F_BREEDER   raw_herdbook    hb_auf_nr   209  2     209 BREEDER(208) BREEDER(20
8) 
\layout LyX-Code


\size footnotesize 
# ext UNIT TABLE COLUMN CONTENT NUMBER TARGET-CODE SAME(db_name) SAME(db_address
) 
\layout LyX-Code


\size footnotesize 
#-------------------------------------------------------------------------------
--- 
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  0          1277  NULL 
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  10570         3  10570 
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  105         104  05  
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  109         677  109 
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  10         7968  10   
\layout LyX-Code


\size footnotesize 
SOC32BREEDER   herdbook.dat   18  11           73  11
\layout LyX-Code


\size footnotesize 
:
\layout LyX-Code


\size footnotesize 
SOC32OWNER     herdbook.dat   11  0          1116  NULL 
\layout LyX-Code


\size footnotesize 
SOC32OWNER     herdbook.dat   11  10144         2  10144 SOC32BREEDER SOC32BREEDE
R 
\layout LyX-Code


\size footnotesize 
SOC32OWNER     herdbook.dat   11  10570         1  10570 SOC32BREEDER SOC32BREEDE
R
\end_inset 


\layout Section

Step 12: Load jobs
\layout Standard

Load all present units and fill the right sequences to table NAMING and
 ADDRESS.
 
\layout Standard


\series bold 
After this, the historic data can be loaded as all verified codes and units
 will be in the represent tables.
\layout Section

Step 13: write all animals to table animal
\layout Standard

The script transfer_to_animal write all animal numbers into table ANIMAL.
 The reason is to have, after loading all external animals into table TRANSFER,
 you need to have all existing internal animal numbers also in table ANIMAL.
 After this step all needed access to this table could only be updates and
 no inserts anymore.
 With this step you guarantee also that all animals reside in this table
 and go down to unknown parents.
 Later all known parents overwrite this behavior.
\layout LyX-Code

\layout Section

Loading Data
\begin_inset LatexCommand \label{load_data_hist}

\end_inset 


\layout Standard

The above steps ensure that all data channels are open and that each external
 identification is connected to the correct internal database number.
 The same holds true for all codes that are to be loaded.
 Also here, we have an external representation and an internal equivalent.
 In the following steps the tables get filled with information from the
 various data files.
 Clearly, these programs require a lot of adaptation, since the structure
 and content of the datafiles will be very different form one species to
 the other.
\layout LyX-Code

 
\layout Subsection

Step 14: Loading Herdbook Records
\layout Standard

As an example the configure section for the loading programs (herdbook)
 is shown in figure 
\begin_inset LatexCommand \ref{load_data_herdbook}

\end_inset 

.
 The parametrisation require two bloks, first the definition of animal identific
ation (also sire and dam) and the definition of traits, and second the sql-secti
on where defined the actions will taken with the data.
 
\layout Standard

All information from the datafile are located by the position in it.
 In the first section the names
\family typewriter 
 
\family default 
ext_animal, ext_sire and ext_dam are mandatory if exist and should have
 the same information as given in collect_ext_id.pl
\size footnotesize 
.

\size default 
 Then follow the definition of the traits.
 The funktion get_value has in mind if the value is a code (defined in collect_c
odes1.pl) and/or have to be redefined (from codes.chg).
 If no value on this position the return value is 'NULL' (in database sense
 = absence), because also no values are allowed (ex: slaughter findings
 only some time appear).
 The second section with the nativ sql-syntax has three possible parts:
\layout Enumerate

insert,
\layout Enumerate

update and
\layout Enumerate

any sql which should be executed only one time after all others.
\layout Standard

The reason for this is to make the inserts much more quickly, if the indices
 are droped and recreated later after this step.
 On the other side, for updates it is an advantage if indices exists.
 The use of the third part is in this example to drop all records from table
 GENES which have no mhs-status because mhs can also be 'NULL'.
 (you can also do this when adding a where clause to the insert sql) 
\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

configure section from load_data_herdbook.pl
\begin_inset LatexCommand \label{load_data_herdbook}

\end_inset 


\layout LyX-Code


\size footnotesize 
######### EDIT -> ################################ 
\layout LyX-Code


\size footnotesize 
$ext_animal = $line[2] .'|'.
 $line[1] .
 '|' .
 $line[0]; 
\layout LyX-Code


\size footnotesize 
$ext_sire   = $line[5] .'|'.
 $line[4] .
 '|' .
 '1'; 
\layout LyX-Code


\size footnotesize 
$ext_dam    = $line[8] .'|'.
 $line[7] .
 '|' .
 '2'; 
\layout LyX-Code


\size footnotesize 
$sex        = get_value( 0 , 
\backslash 
@line ); 
\layout LyX-Code


\size footnotesize 
$breed      = get_value( 9 , 
\backslash 
@line ); 
\layout LyX-Code


\size footnotesize 
$litter     = get_value( 13, 
\backslash 
@line ); 
\layout LyX-Code


\size footnotesize 
$teats_l_no = get_value( 16, 
\backslash 
@line ); 
\layout LyX-Code


\size footnotesize 
  : 
\layout LyX-Code


\size footnotesize 
############## EDIT -> #################### 
\layout LyX-Code


\size footnotesize 
$sql_insert[0]="INSERT INTO genes ( db_animal, db_mhs, 
\layout LyX-Code


\size footnotesize 
                                    last_change_dt, last_change_user ) 
\layout LyX-Code


\size footnotesize 
                         VALUES ( $db_animal, '$mhs', '$now', '$user')";
 
\layout LyX-Code


\size footnotesize 
$sql_insert[1]="INSERT INTO exterior ( db_animal, teats_l_no, teats_r_no,
 ...
\end_inset 

The further data loading programs have the same structure.
\layout Subsection

Step 15: Loading Station Records
\layout Subsection

Step 16: Loading Fieldtest Records
\layout Subsection

Step 17: Loading Litter Records
\layout Subsection

Step 18: Loading Address Records
\layout Section

Step 19: Clear Index
\layout Standard

These step clear such tables which haven't create unique indices after loading
 historic data (see section 
\begin_inset LatexCommand \ref{load_data_hist}

\end_inset 

), because indices are droped when inserting data there and recreated afterwards.
 However there are something wrong with the data.
 In the reference we get duplicated records with the same service date for
 the same animal.
 For example in the output you get the message 
\family typewriter 
\size small 
'Cannot create unique index.
 Table contains...
\begin_inset ERT
status Collapsed

\layout Standard
'
\end_inset 


\family default 
\size default 
, then you can specify the table, the unique index and the indexname like
 in figure 
\begin_inset LatexCommand \ref{clear_index.pl}

\end_inset 

.
\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

EDIT section in clear_index.pl
\begin_inset LatexCommand \label{clear_index.pl}

\end_inset 


\layout LyX-Code


\size footnotesize 
################ E D I T ########################################## 
\layout LyX-Code


\size footnotesize 
#                   table ;     unique index     ; indexname 
\layout LyX-Code


\size footnotesize 
$combination[0] = "service; db_animal, service_dt; uidx_service_2"; 
\layout LyX-Code


\size footnotesize 
################ E N D E - E D I T ################################
\end_inset 

 
\layout Section

Houskeeping
\layout Standard

So far merely data has been loaded into the correct structure.
 However, external data channels have been defined for convenience of the
 loading process but not as external ids as they will reach the database.
 Furthermore, dates in transfer will have to be set.
\layout Subsection

Step 20: Complete transfer with dates from Herdbook
\begin_inset LatexCommand \label{dates_to_transfer_hb.pl}

\end_inset 


\layout Standard

Complete table TRANSFER with information from file 'herdbook.dat'.
 Create proper opening_dt, entry_action...
 for all animals in TRANSFER.
 This step is in the reference db a little difficult, because you have to
 regard a lot of dates in 'herdbook.dat' which can be filled in every combination
 or not.
 Concrete the following information ahve to go to TRANSFER:
\layout Enumerate

breeder
\layout Enumerate

owner
\layout Enumerate

foster breeder
\layout Enumerate

birth date
\layout Enumerate

registration date
\layout Enumerate

leave date
\layout Enumerate

buy date
\layout Standard

Therefor you must describe the sequence and the dependencies for each possible
 combination manually.
 For example opening date: first birth date if exists then buy date if come
 from other society, then registration ...
 Also this step require inserts in table TRANSFER because also buying, renaming
 (registration) and so on should be reflected here.
 :-(
\layout Subsection

Step 21: Complete transfer with dates from Station
\layout Standard

Same procedure as in section 
\begin_inset LatexCommand \ref{dates_to_transfer_hb.pl}

\end_inset 

 for informations comming from station.dat but rather simpler.
 :-)
\layout Subsection

Step 22: Fill last action
\layout Standard

Fill the last reproduction actions in table ANIMAL if possible.
 Get simply the ordered actions from the involved tables (service, litter,
 animal) and fill the newest one to la_rep.
\layout Subsection

Step 23: Rewriting TRANSFER
\layout Standard

In the previous step EXT_ID was defined to make animal ids consistent over
 the complete range of years in the historic dataset.
 They are often a concatenation of various kinds.
 Now that all historic data have been loaded we need to rewrite the EXT_ID
 and UNIT to a format that matches the incoming routine data streams.
 The rewriting needs to be done only for those animals for which we shall
 get routine information.
 Thus, really old animals do not need to be rewritten, instead we can leave
 the ext_ids as they are.
 
\layout Standard

The program post_initial.pl does the job under consideration.
 There are much specific code, because its verrry different which ids are
 needed for incomming datastreams.
 Also the file codes_unit.chg will be created for the new mandatory units
 to make the animal ids unique in each reporting unit.
 The program fill the related tables NAMING and ADDRESS with the correct
 sequences.
\layout Subsection

Step 24: Manual edit 
\layout Standard

These step add the meaning (shortcode, long code, description) of the new
 units to table CODES like described in section 
\begin_inset LatexCommand \ref{edit_codes}

\end_inset 

.
\layout Subsection

Step 25: Insert new codes from post_initial
\layout Standard

Fill the codes physical.
\layout Section

Consistency checking agains the business rules
\layout Standard

So far, data has been loaded outside the business rules.
\layout Comment

Checking TRANSFER
\begin_inset LatexCommand \index{ENTRY}

\end_inset 

 for Consistency
\begin_inset LatexCommand \index{Consistency}

\end_inset 


\layout Comment

A Perl program is available for consistency checks on TRANSFER.
 It is located in references/reports/check_TRANSFER.pl.
 It should run on each database (there is no need to have a different structure
 for TRANSFER) after TRANSFER has been populated.
 Particular focus should be on the duplicates in EXT_ID
\begin_inset LatexCommand \index{ID}

\end_inset 

.
 In general, the user should ask herself if the statistics generated are
 acceptable.
 
\begin_inset Marginal
collapsed true

\layout Standard

not further needed because the startegie has changed!
\end_inset 


\layout Subsection

Checking the database content against the business rules
\layout Standard

During the loading process the APIIS busines rule system has not been in
 effect.
 Thus, data will have been loaded that does not comply with the business
 rules specified in the model file.
 The program check_integrity 
\begin_inset LatexCommand \index{verify\_integrity}

\end_inset 

 does this job.
 
\layout Standard

To this effect each table is accessed in turn then all rows are read one
 by one and validated against the model file business rules.
 Errors are logged in an ascii file with the name of the table used as file
 name and 
\begin_inset Quotes eld
\end_inset 

.err
\begin_inset Quotes erd
\end_inset 

 appended.
\layout Standard

One time you must run this programm to fill the mandatory column 'dirty'
 in each table.
 Set 'true' if one busines rule is violated.
 
\layout Subsection

Treatment of errors
\layout Standard

It should be the ultimate objective to have no data in the database that
 does not comply to the business rules.
 However, for practical reason, this status may be unachievable for a number
 of records.
 One reason will be that the original records are no longer available for
 correction.
 On the other hand deleting a record with only some parts being incorrect
 may also not be an option -- other information will be lost.
 Thus, if the corresponding flag has been set the status column 
\begin_inset Quotes eld
\end_inset 

dirty
\begin_inset Quotes erd
\end_inset 

 will be set to error for those records not complying with the business
 rules.
 These records can then be skipped on later processing.
 Furthermore, at a later stage after loading of historic data the database
 can be clean sucessively.
 The type of error can be regenerated by 
\begin_inset Quotes eld
\end_inset 

verify_integrity
\begin_inset Quotes erd
\end_inset 

 for individual records.
\layout Subsection

Fixing errors
\layout Standard

Example:
\layout Itemize

check_integrity -f model -o 'table date from' 
\newline 
(check_integrity -f ../model/apiis.model -o 'animal birth_dt 1998-01-01')
\layout Itemize

edit file 'animal.birth_dt_since_1998-01-01.errors' (see '~.cvs' and add in
 the new column the correct values)
\layout Itemize

update_from_error_file.pl -f animal.birth_dt_since_1998-01-01.errors
\layout Chapter

The INSPOOL System
\layout Standard

This chapter describes the agreed setup of the INSPOOL system, i.e.
 that part of APIIS which handles the batch inflow of data.
 The system described will refer to the reference database where $APIIS_LOCAL
 must point to.
 This is usually (but not necessarily) located in the $APIIS_HOME/apiis directory.
 
\layout Standard

The design goal of this batch interface to the database is:
\layout Itemize

fully automatic operation
\layout Itemize

triggered from incoming data (ftp, e-mail, etc)
\layout Itemize

scaling with the amount of data coming in
\layout Section

The File System Structure of the INSPOOL System
\layout Standard

Batch data will arrive at the central computer by some means that we shall
 discuss elsewhere.
 This may be via e-mail, ftp or manual copying.
\layout Subsection

Conventions for incoming data
\begin_inset LatexCommand \index{incoming data}

\end_inset 

 files
\layout Standard

All data files will be copied to one location in the file system of the
 database machine which we shall call INSPOOL_DIR.
 The only requirement regarding file names is that no files are overwritten
 (preferably, the write flag should not be set on those files.
 Using the date and time at the arrival of the file may be a good idea.
 They would then look like:
\layout LyX-Code


\size footnotesize 
--INSPOOL_DIR/
\layout LyX-Code


\size footnotesize 
|             ds.1999.12.24-12:32:11
\layout LyX-Code


\size footnotesize 
|             ds.1999.12.13-00:12:01
\layout LyX-Code


\size footnotesize 
|             ds.1999.11.23-09:32:02
\layout LyX-Code


\size footnotesize 
--INSPOOL_DIR/done/ 
\layout LyX-Code


\size footnotesize 
|                  ds.1999.19.32_14:11:21
\layout LyX-Code

\layout Standard

Data files which have been processed i.e.
 loaded into the database INSPOOL table are moved to the subdirectory done/.
\layout Standard

The current naming convention for data files is: file names should start
 with 
\begin_inset Quotes eld
\end_inset 

DS
\begin_inset Quotes erd
\end_inset 

 followed by digits, e.g.
 
\begin_inset Quotes eld
\end_inset 

DS01
\begin_inset Quotes erd
\end_inset 

, 
\begin_inset Quotes eld
\end_inset 

DS12
\begin_inset Quotes erd
\end_inset 

 , 
\begin_inset Quotes eld
\end_inset 

DS102
\begin_inset Quotes erd
\end_inset 

.
\layout Standard

One special case is data file used for loading large binary data - like
 pictures, movies, scanned documents etc.
 This datastream consist of one file containing the file names of the pictures
 and the real picture files.
 In this case all files should be placed in a separate subfolder of the
 INSPOOL_DIR.
\layout Subsection

The INSPOOL Buffer of the database
\layout Standard

All data coming into the database will be stored in the INSPOOL
\begin_inset LatexCommand \index{INSPOOL}

\end_inset 

 section of the database.
 This is the only place which will store data without consistency checks.Its
 purpose is to be the initial repository of all incoming data from which
 it will then be processed and loaded into the database properly under the
 constraints of the business rules in the model file.
 Records that pass this test and get loaded successfully will be flagged
 accordingly in the INSPOOL and skipped the next time it is processed.
\layout Section

The Database Structure of the INSPOOL System
\layout Standard

The database structure connected to the INSPOOL system is given in table
 
\begin_inset LatexCommand \ref{tab:INSPOOL-Structure}

\end_inset 

.
 It is manadatory and should not differ between systems, i.e.
 it should be identical across species.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

INSPOOL Structure
\begin_inset LatexCommand \label{tab:INSPOOL-Structure}

\end_inset 


\layout Standard


\family typewriter 
\size scriptsize 
CREATE TABLE inspool (
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ds\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
 -- datastream (dataset) name
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 record_seq\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
 -- unique ID of record(sequence)
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 in_date\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 date,\SpecialChar ~
 -- Time stamp for initial entry
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ext_unit\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
 -- Reporting Unit
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 proc_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 date,\SpecialChar ~
 -- time stamp for processing
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 status\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
 -- Status column
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 record\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
 -- the data record
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 date,\SpecialChar ~
 -- Date of last change, automatic timestamp
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_user\SpecialChar ~
 text\SpecialChar ~
\SpecialChar ~
 -- User who did the last change
\layout Standard


\family typewriter 
\size scriptsize 
);
\layout Standard


\family typewriter 
\size scriptsize 
CREATE UNIQUE INDEX uidx_inspool_1 ON inspool ( record_seq );
\layout Standard
\align center 

\family typewriter 
\size scriptsize 
\SpecialChar ~

\layout Standard


\family typewriter 
\size scriptsize 
CREATE SEQUENCE seq_inspool__record_seq;
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~

\layout Standard


\family typewriter 
\size scriptsize 
CREATE TABLE inspool_err (
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 record_seq\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- unique ID of record
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 err_type\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error type ( DB OS DATA...)
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 action\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error action
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 dbtable\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error point to table
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 dbcol\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error point to column (inside table)
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 err_source\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Location where error occurred
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 short_msg\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error short message
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 long_msg\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Error long message
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ext_col\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- which external cols are involved
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ext_val\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- external (incoming) value
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 mod_val\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- modified value
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 comp_val\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- compare values (2 in case of la)
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 target_col\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Main/primary column of this record
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ds\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- data stream
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ext_unit\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- external unit 
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 status\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Active of historic?
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 err_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 timestamp,\SpecialChar ~
 -- timestamp for setting status
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 timestamp,\SpecialChar ~
 -- Timestamp of last change
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_user\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Who did the last change
\layout Standard


\family typewriter 
\size scriptsize 
);
\layout Standard


\family typewriter 
\size scriptsize 
CREATE\SpecialChar ~
 INDEX idx_inspool_err_1 ON inspool_err ( record_seq );
\layout Standard

\SpecialChar ~

\layout Standard


\family typewriter 
\size scriptsize 
CREATE TABLE load_stat (
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 ds\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Program name
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 job_start\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 timestamp,\SpecialChar ~
 -- timestamp start of job
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 job_end\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 timestamp,\SpecialChar ~
 -- timestamp end of job
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 status\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- completion code
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 rec_tot_no\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Number of Records processed
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 rec_err_no\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Number of erroneous records
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 nrec_ok_no\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Number of correct records - inserted
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 date,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Date of last change,automatic timestamp
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_user\SpecialChar ~
 text\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- User who did the last change
\layout Standard


\family typewriter 
\size scriptsize 
);
\layout Standard

\SpecialChar ~

\layout Standard


\family typewriter 
\size scriptsize 
CREATE TABLE blobs ( 
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 guid\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- global identifier
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 blob_id\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- number of blob
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 blob\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 bytea,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- binary large objects
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 filename\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- file name
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_dt\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 date,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- Date of last change,automatic timestamp
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 last_change_user\SpecialChar ~
 text\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- User who did the last change
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 owner\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 text,\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- record class
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
\SpecialChar ~
 version\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 int4\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 -- version
\layout Standard


\family typewriter 
\size scriptsize 
); 
\layout Standard


\family typewriter 
\size scriptsize 
CREATE UNIQUE INDEX uidx_blobs_rowid ON blobs ( oid );
\layout Standard

\SpecialChar ~

\layout Standard


\family typewriter 
\size scriptsize 
CREATE SEQUENCE seq_blobs__blob_id;
\end_inset 


\layout Section

Loading the files into INSPOOL
\layout Standard

Depending on their type - binary or ASCII files are handled differently.
\layout Subsection

Loading ASCII files into INSPOOL
\layout Standard

As stated above all incoming data files will arrive in the directory INSPOOL_DIR.
 The program 
\family typewriter 
\size small 
file2inspool.pl
\family default 
\size default 
 
\begin_inset LatexCommand \index{programs!file2inspool}

\end_inset 

will load each data file into the table INSPOOL.
 It is identical for ASCII input datafile.
 This can only work if the header file structure is identical across the
 data streams.
 The first two records need to give the datastream identifier (e.g.
 DS02) and the reporting (external) unit (e.g.
 4711).
 The records that follow need to be selfcontained, i.e.
 each record needs to contain the complete set of information like date
 of testing, herd.
 Thus, the format of these files need to be accommodated at the time when
 they get written.
 This would be for instance when new records get extracted from a sow management
 package.
\layout Subsection

Loading Binary files into INSPOOL
\layout Standard

In this case there is one ASCII file containing the names of the binary
 files
\begin_inset LatexCommand \index{Binary files}

\end_inset 

.
 The structure of this file is similar to the one of a normal datafile:
 the first two records contain datastream identifier (e.g.
 DS15) and the reporting (external) unit (e.g.
 farm32).
 The difference is in the third record - it has to start with the reserved
 word 
\begin_inset Quotes eld
\end_inset 

blobs
\begin_inset Quotes erd
\end_inset 

 followed by a set of numbers - the positions which have to be resolved
 as file names for the binary files.
 One example is shown in table 
\begin_inset LatexCommand \ref{cap:Data-file-header}

\end_inset 

.
 The file2inspool.pl should be executed with option -f <folder_name>, where
 
\begin_inset Quotes eld
\end_inset 

folder_name
\begin_inset Quotes erd
\end_inset 

 is the name of the subfolder containig the files.
 The program will read all binary files, place them in the BLOBS
\begin_inset LatexCommand \index{BLOBS}

\end_inset 

 table and replace the file names with the returned blob_id pointers.
 Then the datafile is automatically loaded as a normal ASCII file in the
 INSPOOL table.
 
\begin_inset Float table
wide false
collapsed false

\layout Caption

Data file header
\begin_inset LatexCommand \label{cap:Data-file-header}

\end_inset 


\layout LyX-Code


\size tiny 
\SpecialChar ~
\SpecialChar ~
DS03
\layout LyX-Code


\size tiny 
\SpecialChar ~
\SpecialChar ~
ini
\layout LyX-Code


\size tiny 
\SpecialChar ~
\SpecialChar ~
blobs\SpecialChar ~
\SpecialChar ~
1\SpecialChar ~
\SpecialChar ~
3
\layout LyX-Code


\size tiny 
\SpecialChar ~
\SpecialChar ~
cat|/home/zgr/duchev/pictures/IN00006A.JPG|123.56|/home/zgr/duchev/pictures/IN0000
9A.JPG|jpg
\layout LyX-Code


\size tiny 
\SpecialChar ~
\SpecialChar ~
dog|/home/zgr/duchev/pictures/IN00004A.JPG|87.10|/home/zgr/duchev/pictures/IN00005
A.JPG|jpg
\end_inset 


\layout Section

Batch Loading From INSPOOL
\layout Subsection

The driver program
\layout Standard

The reference database contains a running example of the batch programs
 for loading data streams into the database.
 The main driver program is called 
\begin_inset Quotes eld
\end_inset 

load_db_from_INSPOOL
\begin_inset Quotes erd
\end_inset 

 and resides in $APIIS_HOME/bin.
\layout Standard


\begin_inset Quotes eld
\end_inset 

load_db_from_INSPOOL
\begin_inset Quotes erd
\end_inset 

 
\begin_inset LatexCommand \index{programs!load\_db\_from\_INSPOOL}

\end_inset 

is a program that can be run at any time.
 It only needs the name of the model file
\begin_inset LatexCommand \index{model file}

\end_inset 

 and the names of the data streams it should process.
 Just run 
\begin_inset Quotes eld
\end_inset 

load_db_from_INSPOOL -h
\begin_inset Quotes erd
\end_inset 

 to get the right syntax.
 
\layout Standard

If new data are present in INSPOOL
\begin_inset LatexCommand \index{table!INSPOOL}

\end_inset 

 those records will be processed, if none exist, nothing much will happen.
 Thus, typically, this program will be started at certain time intervals
 (e.g.
 every 30 minutes) as a cron job.
\layout Subsection

The DS--routines
\begin_inset LatexCommand \index{programs!DS-routines}

\end_inset 


\layout Standard

There is one DS subroutine for each data stream that finds its way into
 the INSPOOL table.
 Thus, if we have 12 data streams for which we get electronic data coming
 into the system, we need to have 12 subroutines in $APIIS_LOCAL/lib (i.e.
 DS01.pm, DS02.pm\SpecialChar \ldots{}
DS12.pm (the names can be chosen differently, however it seems
 useful to stick with this scheme)).
 The objective for each of these programs is as follows:
\layout Enumerate

read the NEW records from INSPOOL pertaining to the DS under consideration.
 Thus, DS02 will read the NEW records for data stream 2.
\layout Enumerate

split the record from INSPOOL according to its format and move them to variables.
\layout Enumerate

create a hash to be passed to the corresponding load object.
 Thus, for each DSnn there will be a LO_nn.
 The latter executes the actual database modifications like inserts, updates,
 deletes.
\layout Enumerate

the status of the INSPOOL records will be set to OK or ERR depending on
 the return status of LO_nn.
 This is done in the subroutine Process_LO_Batch().
\layout Enumerate

in case of an error a record will be inserted into INSPOOL_ERR with all
 available information.
\layout Standard

Now let us go through the code of DS01.pm (Table 
\begin_inset LatexCommand \ref{tab:DS01.pm}

\end_inset 

 on page 
\begin_inset LatexCommand \pageref{tab:DS01.pm}

\end_inset 

):
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

DS01.pm
\begin_inset LatexCommand \label{tab:DS01.pm}

\end_inset 


\begin_inset LatexCommand \index{Datastream!example}

\end_inset 


\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
1 ###################################################################
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
2 #\SpecialChar ~
 DS01.pm reads the Insemination records from INSPOOL;
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
3 #\SpecialChar ~
 $Id: actual_docu.lyx,v 1.38 2004/02/10 07:50:33 heli Exp $\SpecialChar ~
 
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
4 ###################################################################
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
5 sub DS01 {
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
6\SpecialChar ~
\SpecialChar ~
 my $model_file = shift;
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
7 
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
8\SpecialChar ~
\SpecialChar ~
 my %ds_conf;
\layout Standard


\family typewriter 
\size scriptsize 
\SpecialChar ~
9\SpecialChar ~
\SpecialChar ~
 $ds_conf{ds}\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 = 'DS01';
\layout Standard


\family typewriter 
\size scriptsize 
10\SpecialChar ~
\SpecialChar ~
 $ds_conf{all_errors} = [];
\layout Standard


\family typewriter 
\size scriptsize 
11 
\layout Standard


\family typewriter 
\size scriptsize 
12\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 DS_EXIT: {\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # exit label for premature leaving in case of errors:
\layout Standard


\family typewriter 
\size scriptsize 
13\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 DS_PreHandling( 
\backslash 
%ds_conf );
\layout Standard


\family typewriter 
\size scriptsize 
14 
\layout Standard


\family typewriter 
\size scriptsize 
15\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 RECORD:
\layout Standard


\family typewriter 
\size scriptsize 
16\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 while ( my $data_ref = $ds_conf{sth_ds}->fetch ) {
\layout Standard


\family typewriter 
\size scriptsize 
17\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my ( $record_seq, $ext_unit, $record ) = @$data_ref;
\layout Standard


\family typewriter 
\size scriptsize 
18\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $ds_conf{ext_unit}\SpecialChar ~
\SpecialChar ~
 = $ext_unit;
\layout Standard


\family typewriter 
\size scriptsize 
19\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $ds_conf{record_seq} = $record_seq;
\layout Standard


\family typewriter 
\size scriptsize 
20\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my ( $err_status, $err_ref );
\layout Standard


\family typewriter 
\size scriptsize 
21 
\layout Standard


\family typewriter 
\size scriptsize 
22\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # we need to know the data structure of the record:
\layout Standard


\family typewriter 
\size scriptsize 
23\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my $struct = "A20A20A20A20A20A20A20";
\layout Standard


\family typewriter 
\size scriptsize 
24\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my @data\SpecialChar ~
\SpecialChar ~
 = unpack $struct, $record;
\layout Standard


\family typewriter 
\size scriptsize 
25 
\layout Standard


\family typewriter 
\size scriptsize 
26\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # this is text and data that shows up in the error report:
\layout Standard


\family typewriter 
\size scriptsize 
27\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $ds_conf{target_col} = "sow: $data[1] $data[0]";
\layout Standard


\family typewriter 
\size scriptsize 
28 
\layout Standard


\family typewriter 
\size scriptsize 
29\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # order of the incoming data, specified in LO_DS01.pm:
\layout Standard


\family typewriter 
\size scriptsize 
30\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 my @LO_keys = qw( dam_hb_nr dam_society dam_breed
\layout Standard


\family typewriter 
\size scriptsize 
31\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 sire_hb_nr sire_society sire_breed
\layout Standard


\family typewriter 
\size scriptsize 
32\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 service_dt );
\layout Standard


\family typewriter 
\size scriptsize 
33 
\layout Standard


\family typewriter 
\size scriptsize 
34\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # error checking:
\layout Standard


\family typewriter 
\size scriptsize 
35\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 ( $err_status, $err_ref ) = CheckDS( 
\backslash 
@data, 
\backslash 
@LO_keys );
\layout Standard


\family typewriter 
\size scriptsize 
36\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 push @{ $ds_conf{all_errors} }, @{$err_ref} if $err_status;
\layout Standard


\family typewriter 
\size scriptsize 
37\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 last DS_EXIT if $err_status;
\layout Standard


\family typewriter 
\size scriptsize 
38 
\layout Standard


\family typewriter 
\size scriptsize 
39\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 ### some data manipulation:
\layout Standard


\family typewriter 
\size scriptsize 
40\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # remove whitespace:
\layout Standard


\family typewriter 
\size scriptsize 
41\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 @data = map { s/^
\backslash 
s*//; s/
\backslash 
s*$//; $_ } @data;
\layout Standard


\family typewriter 
\size scriptsize 
42 
\layout Standard


\family typewriter 
\size scriptsize 
43\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # dam_society and sire_society have the value 32 if they are not
\layout Standard


\family typewriter 
\size scriptsize 
44\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # defined or '00':
\layout Standard


\family typewriter 
\size scriptsize 
45\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $data[1] = '32' if ( !$data[1] or $data[1] eq '00' );
\layout Standard


\family typewriter 
\size scriptsize 
46\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $data[4] = '32' if ( !$data[4] or $data[4] eq '00' );
\layout Standard


\family typewriter 
\size scriptsize 
47 
\layout Standard


\family typewriter 
\size scriptsize 
48\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # reformat service date and use LocalToRawDate( 'EU', $date )
\layout Standard


\family typewriter 
\size scriptsize 
49\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # getdate() does this job.
 It resides in apiis_alib.pm.
\layout Standard


\family typewriter 
\size scriptsize 
50\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 ( $data[6], $err_status, $err_ref ) = getdate( $data[6] )
\layout Standard


\family typewriter 
\size scriptsize 
51\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 if defined $data[6];
\layout Standard


\family typewriter 
\size scriptsize 
52\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 if ($err_status) {
\layout Standard


\family typewriter 
\size scriptsize 
53\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 push @{ $ds_conf{all_errors} }, @{$err_ref};
\layout Standard


\family typewriter 
\size scriptsize 
54\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 next RECORD;
\layout Standard


\family typewriter 
\size scriptsize 
55\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 }
\layout Standard


\family typewriter 
\size scriptsize 
56 
\layout Standard


\family typewriter 
\size scriptsize 
57\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # now data elements are ready to be sent to the LO
\layout Standard


\family typewriter 
\size scriptsize 
58\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $ds_conf{data}\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 = 
\backslash 
@data;
\layout Standard


\family typewriter 
\size scriptsize 
59\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 $ds_conf{LO_keys} = 
\backslash 
@LO_keys;
\layout Standard


\family typewriter 
\size scriptsize 
60 
\layout Standard


\family typewriter 
\size scriptsize 
61\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 ######### this calls the LO and does the post processing of errors:
\layout Standard


\family typewriter 
\size scriptsize 
62\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 Process_LO_Batch( 
\backslash 
%ds_conf );
\layout Standard


\family typewriter 
\size scriptsize 
63 
\layout Standard


\family typewriter 
\size scriptsize 
64\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 print "Finishing data loop ...
\backslash 
n" if $debug > 5;
\layout Standard


\family typewriter 
\size scriptsize 
65\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 last RECORD if $debug > 5;
\layout Standard


\family typewriter 
\size scriptsize 
66\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 }\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # record loop
\layout Standard


\family typewriter 
\size scriptsize 
67\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 }\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 # DS_EXIT label
\layout Standard


\family typewriter 
\size scriptsize 
68\SpecialChar ~
\SpecialChar ~
\SpecialChar ~
 DS_PostHandling( 
\backslash 
%ds_conf );
\layout Standard


\family typewriter 
\size scriptsize 
69 }
\layout Standard


\family typewriter 
\size scriptsize 
70 ###################################################################
\layout Standard


\family typewriter 
\size scriptsize 
71 1;
\end_inset 


\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
6: The model file is the only parameter passed from load_db_from_INSPOOL
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
8\SpecialChar ~
--\SpecialChar ~
10: A hash for storing several data is created and the name of this
 data stream is inserted.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
12: This is only a label to leave the processing of this data stream
 prematurely in case of severe errors.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
13: Some common tasks (setting up some counters, preparing database
 handles for data retrieving and statistic/error reporting) have been moved
 into this subroutine.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
15/16: Every new record record of this data stream is now handled separatel
y.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
17\SpecialChar ~
--\SpecialChar ~
19: The important parts of the INSPOOL record are assigned to variables
 and the hash 
\family typewriter 
\size small 
%ds_conf
\family default 
\size default 
 stores some more parameters.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
22\SpecialChar ~
--\SpecialChar ~
24: You have to know the structure of the data! In this case it
 is in fixed format, often you also find delimiter separated columns where
 you have to 
\family typewriter 
\size scriptsize 
split()
\family default 
\size default 
 on the delimiter.
 The columns are assigned to the array 
\family typewriter 
\size small 
@data
\family default 
\size default 
.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
27: Some information is added to 
\family typewriter 
\size scriptsize 
%ds_conf
\family default 
\size default 
 to better associate errors to the responsible incoming data column, e.g.
 piglets to the litter sow data.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
35\SpecialChar ~
--\SpecialChar ~
37: Basic checks are exported to CheckDS(), currently only if the
 number of data columns coincides with the number of LO_keys.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
41\SpecialChar ~
--\SpecialChar ~
55: Parts of the data are prepared for further processing, e.g.
 leading and trailing blanks are removed, some columns values are changed
 according to the values of other columns and the date is converted to a
 predefined format.
 Errors are caught and processed.
\layout List
\labelwidthstring 00.00.0000

lines\SpecialChar ~
58\SpecialChar ~
--\SpecialChar ~
59: The prepared data and the LO_keys are pushed onto 
\family typewriter 
\size small 
%ds_conf
\family default 
\size default 
.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
62: Process_LO_Batch get 
\family typewriter 
\size small 
%ds_conf
\family default 
\size default 
 passed.
 It creates the input hash for the LoadObject, calls the LO, and does the
 post processing of the errors (INSPOOL_ERR) .
 These tasks are hidden in a subroutine as no user interaction is needed
 here.
\layout List
\labelwidthstring 00.00.0000

line\SpecialChar ~
68: DS_PostHandling does also some error handling and writes the counters
 into table LOAD_STAT.
\layout Subsection

The Load Objects
\begin_inset LatexCommand \index{Load Object}

\end_inset 


\layout Standard

For a description of the load objects see the corresponding chapter
\begin_inset Marginal
collapsed true

\layout Standard

cant seem to get the crossrefernce in.
\end_inset 

.
\layout Section

Reporting
\layout Standard

In this paragraph we will deal with reporting on LOAD_STAT and INSPOOL_ERR
\layout Subsection

Load_stat
\layout Subsection

Inspool_err
\layout Section

Error Correcting
\layout Standard

Here we describe the correction facilities of INSPOOL.
\layout Subsection

GUI Interface to INSPOOL
\layout Chapter

The Security System
\layout Standard

The following is open for discussion.
 Nothing has been implemented yet.
\layout Standard

APIIS will be used in a multi user system in a client server architecture
 including access through the WWW.
 Thus stringent security and access validation is of parameount importance.
 There are three levels of access requirements:
\layout Itemize

user validation
\layout Itemize

access rights restricted for each column in the database with access rights
 to be specified for reading, updating and deleting and inserts
\begin_inset LatexCommand \label{ite:access-rights-restricted}

\end_inset 


\layout Itemize

access rights to be specified on column content
\layout Itemize

the default access is none.
 Thus, access is only allowed after it has been granted.
 This rules out a cooperative access control mechanism
\layout Section

Why a separate RDBMS independant access control system?
\layout Standard

The stuff further down seems to be nonsense.
 We shall use the SQL-92 grant system instead of the stuff below.
 However, we do need am API to set the grants for various backends.
\layout Standard

APIIS is used with a whole number of RDBMS such as Oracle, PostgreSQL, Informix
 and others.
 As the access control is handled differently for each of them only an APIIS
 specific system will assure portability across RDBMS.
 Furthermore, content dependant access control to certain rows is not at
 all generally available.
 For these reasons it was decided to implement an APIIS specific access
 control mechanism.
\layout Section

The Access Control Mechanism (ACM)
\layout Standard

The main requirement is that no user can access the APIIS database without
 having its user rights properly set up.
 This applies not only to users of existing programs but also to programmers.
 Thus, the ACM model chosen is not a cooperative system -- which would work
 only when all programmers adhere to a given set of rules -- but could get
 database access ignoring the set of rules.
 The ACM proposed has two levels:
\layout Enumerate

all database access is done via one user (lest call it DB_ROOT) which is
 specified with user name and password by the perspective RDBMS.
 Thus, this user has to be specified with the respective grant mechanism
 of the RDBMS in use.
 This user will have complete access with all rights to all parts of the
 database.
 Thus, this user is equivalent to the root user in UNIX systems.
 
\layout Enumerate

Communications with the database is soley through the meta layer which resides
 between the user programs and the RDBMS backend.
 Only this meta layer knows the user and its password and is read protected
 to all other users in the system.
 This includes software developers.
 In this way a direct connection with the database will not be possible
 as user/passwd are not known.
 
\newline 
A deamon will take incoming requests from the user programs, executes the
 ACM mechanism (including) business rules (thus, DB_ROOT is also the sole
 owner of the model file) and pass the database request to the database
 backend.
 Likewise, it receives the results from the backend and passes it on to
 the user program.
\layout Enumerate

The user program -- as stated above -- starts the interaction with the meta_deam
on.
 As such it needs to send a user identification and a password to the meta_deamo
n.
 This user/password set needs to be stored in the database.
 If it is not valid no connection will be allowed.
\layout Enumerate

Once a program with legal user/passwd has connected to the meta_deamon,
 each database interaction is tested for validity.
 This is amounts to verifying each SQL string against the ruled applicable
 to the corresponding user/passwd -- which are indeed stored in the database.
 If an SQL string contains illegal operations it will not get passed to
 the backend and, thus, not be executed.
 This stage of verification will be called ACM_filter.
\layout Section

The ACM_filter
\layout Standard

The global objectves of the ACM_filter are stated 
\begin_inset LatexCommand \ref{ite:access-rights-restricted}

\end_inset 

.
 The general procedure is, that for a user to access a column the user needs
 to have his access granted.
 This implies that for each column in the database the access right must
 be able to be specified.
 This, can be different for each of the Read (R), Update (U), Delete (D)
 and Inserts (I).
 Thus, for each user the following logical table with access rights must
 be specified:
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

ACCESS_RIGHT for one user
\layout Standard
\align center 

\begin_inset  Tabular
<lyxtabular version="3" rows="9" columns="5">
<features>
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" width="0pt">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0pt">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Table/column
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

R
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

U
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

D
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

I
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Animal/db_id
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Animal/breed
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Animal/BLUP
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Address/name
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

Address/account
\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

x
\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\layout Standard

\end_inset 
</cell>
</row>
</lyxtabular>

\end_inset 


\end_inset 


\layout Chapter

XML and APIIS model
\layout Standard

Writing a model file as a simple text file always consumes a lot of time
 and is not protected of making mistakes that can have effect on further
 work with other APIIS tools.
 Working with a text editor usual does not give the completely picture of
 a document stricture that makes changes in the model file difficult and
 slow.
 In order to use faster and safety way for writing and editing a model file
 XML standard is implemented for describing data model structure of APIIS.
 
\layout Section

Why XML?
\layout Standard

:) 
\layout Section

Needed modules
\layout Standard

The names of needed modules are written in file 
\emph on 
needed_modules
\emph default 
 in apiis tree.
 
\layout Subsection

Parsing XML document
\layout Standard

From many existing perl parsers of XML documents are chosen two that are
 standard for Perl 5.6.1 - XML::Parser and XML::Writer.
 Usual these modules are installed during regular perl installation in folder
 named 
\emph on 
xml
\emph default 
.
 They use stream methods of parsing that are faster and take less memory
 for storage of data elements which was the reason for their usage.
\layout Standard

For better XML print a code, version of XML::Writer, 
\emph on 
myWriter
\emph default 
 is improved specially for APIIS.
\layout Subsection

Document Type Definition (DTD) of APIIS model in XML standard 
\layout Standard

APIIS model file is described in XML DTD format via the structure given
 in the figure 
\begin_inset LatexCommand \ref{modeldtd}

\end_inset 

 .
 The root element is the 
\emph on 
model
\emph default 
 with sub elements or children 
\emph on 
general
\emph default 
 and 
\emph on 
table
\emph default 
.
 The sub elements of 
\emph on 
table
\emph default 
 are 
\emph on 
column
\emph default 
 and 
\emph on 
TABLE.
 TRIGGER 
\emph default 
and
\emph on 
 CONSTRAINTS 
\emph default 
are sub elements of
\emph on 
 TABLE.
\layout Standard


\begin_inset Float figure
placement htbp
wide false
collapsed false

\layout Caption

The XML structure of APIIS model 
\begin_inset LatexCommand \label{modeldtd}

\end_inset 


\layout Standard
\align center 

\begin_inset Graphics
	filename modeldtd.eps
	scale 40
	rotateOrigin center

\end_inset 


\end_inset 


\layout Standard

The DTD file on the figure 
\begin_inset LatexCommand \ref{DTDfile}

\end_inset 

 shows the elements definitions in APIIS model XML format as well as their
 attributes' lists.
 As attributes are better processed by some XML editors they are preferred
 here.
 Usage of attributes allows default values that facilitates the inserts
 of model elements.
 It can be seen that elements marked by '+' are these appearing more than
 ones in the model structure like 
\emph on 
table
\emph default 
 and 
\emph on 
column
\emph default 
.
\layout Standard


\begin_inset Float table
placement htbp
wide false
collapsed false

\layout Caption

DTD file of APIIS model 
\begin_inset LatexCommand \label{DTDfile}

\end_inset 


\layout Standard


\size scriptsize 
<!DOCTYPE model [
\layout Standard


\size scriptsize 
<!ELEMENT model (general,table+)>
\layout Standard


\size scriptsize 
<!ELEMENT general EMPTY>
\layout Standard


\size scriptsize 
<!ATTLIST general 
\layout Standard


\size scriptsize 
dbdriver (Pg|Oracle|CSV|InterBase|Sybase) "Pg"
\layout Standard


\size scriptsize 
dbname CDATA #REQUIRED
\layout Standard


\size scriptsize 
dbhost CDATA "localhost"
\layout Standard


\size scriptsize 
dbport CDATA "5432"
\layout Standard


\size scriptsize 
dbuser CDATA "$user"
\layout Standard


\size scriptsize 
dbpassword CDATA "">
\layout Standard


\size scriptsize 
<!ELEMENT table (column+,TABLE)>
\layout Standard


\size scriptsize 
<!ATTLIST table
\layout Standard


\size scriptsize 
name CDATA #REQUIRED>
\layout Standard


\size scriptsize 
<!ELEMENT column EMPTY>
\layout Standard


\size scriptsize 
<!ATTLIST column DATA CDATA ""
\layout Standard


\size scriptsize 
name CDATA #REQUIRED
\layout Standard


\size scriptsize 
DATATYPE
\layout Standard


\size scriptsize 
(CHAR|HUGEINT|BIGINT|SMALLINT|DATE|TIME|TIMESTAMP|SMALLFLOAT|BIGFLOAT|BOOL)
 "CHAR"
\layout Standard


\size scriptsize 
LENGTH CDATA "20"
\layout Standard


\size scriptsize 
DESCRIPTION CDATA #REQUIRED
\layout Standard


\size scriptsize 
DEFAULT CDATA ""
\layout Standard


\size scriptsize 
CHECK CDATA ""
\layout Standard


\size scriptsize 
MODIFY CDATA ""
\layout Standard


\size scriptsize 
ERROR CDATA "">
\layout Standard


\size scriptsize 
<!ELEMENT TABLE (TRIGGER,CONSTRAINTS)> 
\layout Standard


\size scriptsize 
<!ELEMENT TRIGGER EMPTY>
\layout Standard


\size scriptsize 
<!ATTLIST TRIGGER PREINSERT CDATA ""
\layout Standard


\size scriptsize 
POSTINSERT CDATA ""
\layout Standard


\size scriptsize 
PREUPDATE CDATA ""
\layout Standard


\size scriptsize 
POSTUPDATE CDATA ""
\layout Standard


\size scriptsize 
PREDELETE CDATA ""
\layout Standard


\size scriptsize 
POSTDELETE CDATA "">
\layout Standard


\size scriptsize 
<!ELEMENT CONSTRAINTS EMPTY>
\layout Standard


\size scriptsize 
<!ATTLIST CONSTRAINTS 
\layout Standard


\size scriptsize 
PRIMARYKEY CDATA ""
\layout Standard


\size scriptsize 
SEQUENCE CDATA ""
\layout Standard


\size scriptsize 
INDEX CDATA ""> ]>
\end_inset 


\layout Subsection

Converting the model file to XML format
\layout Standard

The perl code 
\emph on 
model2xml.pl
\emph default 
 converts the model file to XML format.
 Location is in 
\emph on 
apiis/bin
\emph default 
.
 The syntax is the next:
\layout Standard


\emph on 
model2xml model_filename xml_filename, 
\emph default 
where the first argument is the model file name and second is the xml file
 name that is better to have extension 
\emph on 
xml
\emph default 
 for further work with some XML editors.
 
\layout Subsection

Extracting APIIS model file from XML document 
\layout Standard

Extracting the mode file from xml formatted file is done by perl code 
\emph on 
xml2model
\emph default 
.
\emph on 
pl
\emph default 
 located in 
\emph on 
apiis/bin
\emph default 
.
 The syntax is the next:
\layout Standard


\emph on 
xml2model
\emph default 
 
\emph on 
xml_filename model_filename
\emph default 
, where the arguments are with the same meaning as in 8.2.3.
 Here the default values of the elements' arguments are taken automatically
 from DTD file.
 The size of xml format file is twice less than usual model format file
 because all default values are not saved.
\layout Subsection

Editing of XML documents 
\layout Standard

XML editors process XML documents usual in GUI environment where all existing
 xml elements are accessible for editing, moving and copies.
 All operations are controlled via DTD file or XML scheme.
 The entire structure of the document is in tree view that can be easy processed.
 
\layout Standard

So far editor of choice is 
\emph on 
Xerlin
\emph default 
 available in http://www.xerlin.org.
 It demands Java machine to be installed.
 
\layout Section

How to use? 
\layout Standard

The idea is using the document type definition in 'model.dtd' and working
 with the program 'xerlin' to write the model file in format of xml document.
 The process is facilitated via usage of libraries of elements: columns
 and tables in which the main DB structure of APIIS is implemented.
 
\layout Subsection

Creating a new model file
\layout Standard

Steps:
\layout Enumerate

Open library apiis.xmllib from where the necessary elements could be copied
 or simply 'drop and drag'.
\layout Enumerate

Start new file with choice of DTD file model.dtd from apiis/lib that will
 be used for xml structure control and checks.
\layout Enumerate

Insert the root element of the document - 
\emph on 
model
\emph default 
 and first its child - general.
 
\layout Enumerate

Take from library the main table xml equivalents
\layout Enumerate

Insert other elements
\layout Standard

For creating a complete model file is recommended to start with root element
 although the program offers you to choose from which element to start.
\layout Standard

All attributes with mandatory values (#REQUIERED) are marked to be inserted
 before next element starts.
 The context menus of the right mouse button in Xerlin offer to choose among
 legal operations and elements according the DTD and current content of
 the document.
 All operations are restricted by context and logical structure in DTD that
 protect the user from making mistakes.
 In the context menu only legal elements are accessed and can be inserted
 after, before or into a current element.
\layout Standard

When an element is chosen its attributes are shown in right panel, default
 values are there and we insert only attribute values which are different
 from default ones.
\layout Standard

The result file contains all elements of table and column types and their
 attributes.
 The default attributes' values are not recorded in this file if the property
 'merlot.write.default-attr' has a value 'false' in preference panel.
 
\layout Subsection

Editing the model file
\layout Standard

To produce APIIS format model file in syntax we use in APIIS environment
 is used the module 
\emph on 
xml2model.pl
\emph default 
.
 The result file is used by other APIIS applications.
 In case the model file needs to be changed in Xerlin it is reversed in
 xml format via module model2xml.pl.
 
\layout Subsection

Using alternative XML editors.
\layout Standard

In case Xerlin is not accessible another xml editor could be used.
 
\layout Enumerate

xemacs 
\layout Enumerate

kate
\layout Enumerate

kxmleditor
\layout Standard

If they are appropriate will be investigated.(so far they are weaker than
 Xerlin) 
\layout Chapter

Appendix
\layout Standard

Programmoptions used in runall.pl
\layout LyX-Code


\size footnotesize 
collect_ext_id.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                  -i --> create ignore file 
\layout LyX-Code


\size footnotesize 
                  -d --> create duplicate file 
\layout LyX-Code


\size footnotesize 
                  -n <Output file> --> short statistic duplicated animals
 
\layout LyX-Code


\size footnotesize 
                     (only if -d set) default = hb_not_uniq.txt 
\layout LyX-Code


\size footnotesize 
                  -f <duplicate file> --> default = dup_animal.chg 
\layout LyX-Code


\size footnotesize 
                  -c <ignore file> --> default = ignore_animal.ok 
\layout LyX-Code


\size footnotesize 
                  -m <number> --> stop after <number> records 
\layout LyX-Code


\size footnotesize 
                  -x --> create more statistic about use of animals in different
 files
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
collect_codes1.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                  -m <number> --> stop after <number> records 
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
collect_codes2.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                  -f <file.chg> --> file to change codes
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
collect_job1.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                -m <number> --> stop after <number> records
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
collect_job2.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                -f <file.chg> --> default = job.chg 
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
load_data_herdbook.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                      -f <file.chg> --> file to change codes 
\layout LyX-Code


\size footnotesize 
                      -m <number> --> stop after <number> records 
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
dates_to_transfer_hb.pl -h --> Help 
\layout LyX-Code


\size footnotesize 
                        -m <number> --> stop after <number> records
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
pedigree_loops.pl usage: -h this message 
\layout LyX-Code


\size footnotesize 
                         -p loops printed 
\layout LyX-Code


\size footnotesize 
                         -l loop limit to define a loop (default = 1000)
\layout LyX-Code

\layout LyX-Code


\size footnotesize 
check_integrity -h --> Help 
\layout LyX-Code


\size footnotesize 
                -v --> Version 
\layout LyX-Code


\size footnotesize 
                -f <modelfile> --> Name of model file 
\layout LyX-Code


\size footnotesize 
                -t <table> --> Name of table to check 
\layout LyX-Code


\size footnotesize 
                -g <Output file> --> Name of output file (default = check_integr
ity.erg) 
\layout LyX-Code


\size footnotesize 
                -s <number> --> stop after <number> records 
\layout LyX-Code


\size footnotesize 
                -e --> written into error file 
\layout LyX-Code


\size footnotesize 
                -a <table> --> create output for erros (whole table) 
\layout LyX-Code


\size footnotesize 
                -o <'table column date'>--> create output for erros since
 date ( only one table ) 
\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
newpage
\end_inset 


\layout Standard

Datastructures for ascii-files used in the reference database:
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard
{
\backslash 
footnotesize 
\backslash 
begin{longtable}{|llllccc|} 
\backslash 
hline field & column & target table & code-class (remarks) & animal / selection & sire & dam 
\backslash 

\backslash 
 
\backslash 
hline 
\backslash 
hline 
\backslash 
endhead 
\backslash 
multicolumn{7}{|c|}{
\backslash 
bf herdbook.dat} 
\backslash 

\backslash 
 
\backslash 
hline Field00 & sex & $
\backslash 
Rightarrow$ animal & & $
\backslash 
bullet$ & & 
\backslash 

\backslash 
 Field01 & hb
\backslash 
_nr & & & $
\backslash 
bullet$ & & 
\backslash 

\backslash 
 Field02 & society & $
\backslash 
Rightarrow$ address? & & $
\backslash 
bullet$ & & 
\backslash 

\backslash 
 Field03 & sire
\backslash 
_sex & & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field04 & sire
\backslash 
_hb
\backslash 
_nr & $
\backslash 
Rightarrow$ animal & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field05 & sire
\backslash 
_society & & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field06 & dam
\backslash 
_sex & & & $
\backslash 
circ$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field07 & dam
\backslash 
_hb
\backslash 
_nr & $
\backslash 
Rightarrow$ animal & & $
\backslash 
circ$ & &$
\backslash 
bullet$ 
\backslash 

\backslash 
 Field08 & dam
\backslash 
_society & & & $
\backslash 
circ$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field09 & breed & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field10 & name & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field11 & owner
\backslash 
_nr & $
\backslash 
Rightarrow$ address & & & & 
\backslash 

\backslash 
 Field12 & notch
\backslash 
_nr & & & $
\backslash 
circ$ & & 
\backslash 

\backslash 
 Field13 & parity
\backslash 
_no & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field14 & birth
\backslash 
_dt & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field15 & entry
\backslash 
_dt & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field16 & teats
\backslash 
_left
\backslash 
_no & $
\backslash 
Rightarrow$ exterior & & & & 
\backslash 

\backslash 
 Field17 & teats
\backslash 
_right
\backslash 
_no & $
\backslash 
Rightarrow$ exterior & & & & 
\backslash 

\backslash 
 Field18 & breeder
\backslash 
_no & $
\backslash 
Rightarrow$ address & & & & 
\backslash 

\backslash 
 Field19 & foster
\backslash 
_breeder
\backslash 
_no & $
\backslash 
Rightarrow$ address & & & & 
\backslash 

\backslash 
 Field20 & mhs & $
\backslash 
Rightarrow$ genes & & & & 
\backslash 

\backslash 
 Field21 & buy
\backslash 
_dt & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field22 & leave
\backslash 
_dt & $
\backslash 
Rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field23 & exterior & $
\backslash 
Rightarrow$ exterior & & & & 
\backslash 

\backslash 
 
\backslash 
hline 
\backslash 
multicolumn{7}{|c|}{
\backslash 
bf station.dat} 
\backslash 

\backslash 
 
\backslash 
hline Field00 & sex & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field01 & breeder & $
\backslash 
rightarrow$ address & & & & 
\backslash 

\backslash 
 Field02 & breed & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field03 & birth
\backslash 
_dt & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field04 & sire
\backslash 
_sex & & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field05 & sire
\backslash 
_society & & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field06 & sire
\backslash 
_hb
\backslash 
_nr & $
\backslash 
rightarrow$ animal & & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field07 & dam
\backslash 
_sex & & &$
\backslash 
bullet$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field08 & dam
\backslash 
_society & & &$
\backslash 
bullet$ & &$
\backslash 
bullet$ 
\backslash 

\backslash 
 Field09 & dam
\backslash 
_hb
\backslash 
_nr & $
\backslash 
rightarrow$ animal & & $
\backslash 
bullet$ & &$
\backslash 
bullet$ 
\backslash 

\backslash 
 Field10 & notch
\backslash 
_nr & & & $
\backslash 
bullet$ & & 
\backslash 

\backslash 
 Field11 & stable
\backslash 
_nr & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field12 & run
\backslash 
_nr & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field13 & buy
\backslash 
_wt & $
\backslash 
Rightarrow$ weight & buy
\backslash 
_s &&& 
\backslash 

\backslash 
 Field14 & buy
\backslash 
_dt & $
\backslash 
Rightarrow$ station & buy
\backslash 
_s &&& 
\backslash 

\backslash 
 Field15 & leave
\backslash 
_dt & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field16 & leave
\backslash 
_reason & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field17 & to
\backslash 
_station
\backslash 
_group
\backslash 
_wt & $
\backslash 
Rightarrow$ weight & gr
\backslash 
_start
\backslash 
_s &&& 
\backslash 

\backslash 
 Field18 & to
\backslash 
_station
\backslash 
_group
\backslash 
_dt & $
\backslash 
Rightarrow$ weight & gr
\backslash 
_start
\backslash 
_s &&& 
\backslash 

\backslash 
 Field19 & group
\backslash 
_automat & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field20 & contest
\backslash 
_start
\backslash 
_dt & $
\backslash 
Rightarrow$ weight & start
\backslash 
_s &&&
\backslash 

\backslash 
 Field21 & contest
\backslash 
_start
\backslash 
_wt & $
\backslash 
Rightarrow$ weight & start
\backslash 
_s &&&
\backslash 

\backslash 
 Field22 & contest
\backslash 
_end
\backslash 
_dt & $
\backslash 
Rightarrow$ weight & end
\backslash 
_s &&&
\backslash 

\backslash 
 Field23 & contest
\backslash 
_end
\backslash 
_wt & $
\backslash 
Rightarrow$ weight & end
\backslash 
_s &&&
\backslash 

\backslash 
 Field24 & feeding
\backslash 
_automat
\backslash 
_wt & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field25 & feeding
\backslash 
_manuell
\backslash 
_wt & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field26 & slaughter
\backslash 
_dt & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field27 & slaughter
\backslash 
_house & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field28 & slaughter
\backslash 
_nr & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field29 & slaughter
\backslash 
_wt & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field30 & carcass
\backslash 
_length & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field31 & lean
\backslash 
_meat
\backslash 
_content
\backslash 
_sonde & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 Field32 & slaughter
\backslash 
_remarks & $
\backslash 
Rightarrow$ station & & & & 
\backslash 

\backslash 
 
\backslash 
hline 
\backslash 
multicolumn{7}{|c|}{
\backslash 
bf field.dat} 
\backslash 

\backslash 
 
\backslash 
hline Field00 & dam
\backslash 
_sex & $
\backslash 
rightarrow$ animal & & $
\backslash 
bullet$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field01 & dam
\backslash 
_hb
\backslash 
_nr & $
\backslash 
rightarrow$ animal & & $
\backslash 
bullet$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field02 & dam
\backslash 
_society & & &$
\backslash 
bullet$ & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field03 & notch
\backslash 
_nr & & & $
\backslash 
bullet$ & & 
\backslash 

\backslash 
 Field04 & breed & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field05 & test
\backslash 
_dt & $
\backslash 
rightarrow$ exterior & & & & 
\backslash 

\backslash 
 Field06 & teats
\backslash 
_left
\backslash 
_no & $
\backslash 
rightarrow$ exterior & & & & 
\backslash 

\backslash 
 Field07 & teats
\backslash 
_right
\backslash 
_no &$
\backslash 
rightarrow$ exterior & & & & 
\backslash 

\backslash 
 Field08 & backfat & $
\backslash 
rightarrow$ weight & field &&&
\backslash 

\backslash 
 Field09 & age & $
\backslash 
rightarrow$ animal & (calculate birth
\backslash 
_dt) &&& 
\backslash 

\backslash 
 Field10 & sex & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 
\backslash 
hline 
\backslash 
multicolumn{7}{|c|}{
\backslash 
bf litter.dat} 
\backslash 

\backslash 
 
\backslash 
hline Field00 & dam
\backslash 
_sex & & & & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field01 & dam
\backslash 
_hb
\backslash 
_nr & $
\backslash 
rightarrow$ animal & & & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field02 & dam
\backslash 
_society & & & & & $
\backslash 
bullet$ 
\backslash 

\backslash 
 Field03 & parity
\backslash 
_no & $
\backslash 
Rightarrow$ litter & & & & 
\backslash 

\backslash 
 Field04 & breed & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field05 & sire
\backslash 
_sex & & (service sire) & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field06 & sire
\backslash 
_society & & (service sire) & & $
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field07 & sire
\backslash 
_hb
\backslash 
_nr & $
\backslash 
Rightarrow$ service & (service sire) & &$
\backslash 
bullet$ & 
\backslash 

\backslash 
 Field08 & sire
\backslash 
_breed & $
\backslash 
rightarrow$ animal & & & & 
\backslash 

\backslash 
 Field09 & birth
\backslash 
_dt & $
\backslash 
Rightarrow$ litter & & & & 
\backslash 

\backslash 
 Field10 & insemination
\backslash 
_dt & $
\backslash 
Rightarrow$ service & & & & 
\backslash 

\backslash 
 Field11 & born
\backslash 
_alive
\backslash 
_no & $
\backslash 
Rightarrow$ litter & & & & 
\backslash 

\backslash 
 
\backslash 
hline 
\backslash 
end{longtable} 
\backslash 
vspace{-4mm}
\layout Standard
$
\backslash 
Rightarrow 
\backslash 
hat{=}$ INSERT; $
\backslash 
rightarrow 
\backslash 
hat{=}$ UPDATE }
\end_inset 


\layout Standard


\begin_inset LatexCommand \printindex{}

\end_inset 


\the_end
